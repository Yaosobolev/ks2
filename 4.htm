<html>
<!-- Creation date: 03.10.2005 -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title></title>
<meta name="description" content="">
<meta name="keywords" content="">
<meta name="author" content="Unregistered User">
<meta name="generator" content="CuteHTML Pro">
<link rel="StyleSheet" type="text/css" href="style.css">
</head>
<body bgcolor="#FFFFFF">
<!--*************************************************************************************-->
<p align="center">
		<a name="4"><font class="big"> 4 Объединение сетей с помощью мостов, коммутаторов и маршрутизаторов</font></a>
</p>
<p align="center">
		<a name="4.1"><font class="big"> 4.1 Распределение устройств объединения сетей в соответствии с моделью OSI</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Устройства объединения сетей обеспечивают связь между сегментами локальных сетей, отдельными локальными сетями и подсетями любого уровня. Эти устройства в самом общем виде могут быть отнесены к определенным уровням эталонной модели взаимодействия открытых систем.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Соотношение между функциями этих устройств и уровнями модели OSI показано на рисунке 4.1. </p>
<p align="center"><img src="img/chapter4/4.1.jpg"/></p>
<p align="center">Рисунок 4.1 - Соответствие функции различных устройств сети уровням модели OSI</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.1 показаны основные элементы компьютерной сети: конечные узлы – компьютеры и промежуточные узлы – концентраторы, мосты, коммутаторы и маршрутизаторы. Из рисунка видно, что полный стек протоколов реализован только на конечных узлах, а промежуточные узлы поддерживают протоколы всех трех нижних уровней. Это объясняется тем, что коммуникационным устройствам для продвижения пакетов достаточно функциональности нижних трех уровней.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Более того, коммуникационное устройство может поддерживать только протоколы двух нижних уровней или даже одного физического уровня - это зависит от типа устройства. Именно к таким устройствам, работающим на физическом уровне, относятся, например, сетевые повторители, называемые также концентраторами, или хабами. Они повторяют электрические сигналы, поступающие на одни их интерфейсы, на других своих интерфейсах, улучшая их характеристики – мощность и форму сигналов, синхронность их следования.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.2 отображаются сегменты, которые могут быть образованы, при использовании различного оборудования.</p>
<p align="center"><img src="img/chapter4/4.2.jpg"/></p>
<p align="center">Рисунок 4.2 - Образование сегментов с помощью коммуникационного оборудования</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Повторитель, регенерирует сигналы, за счет чего позволяет увеличивать длину сети, работает на физическом уровне. За счет усиления и восстановления формы электрических сигналов повторителем становится возможным расширение сетей, построенных на основе коаксиального кабеля и увеличение общего числа пользователей сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Сетевой адаптер также работает на физическом и отчасти на канальном уровнях. К физическому уровню относится та часть функций сетевого адаптера, которая связана с приемом и передачей сигналов по линии связи, а получение доступа к разделяемой среде передачи, распознавание МАС-адреса компьютера - это уже функция канального уровня.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мосты и коммутаторы локальных сетей поддерживают протоколы двух нижних уровней, физического и канального, что дает им возможность работать в пределах  стандартных топологий. Другими словами мосты и коммутаторы объединяют сети на канальном
уровне и используют функциональные возможности физического уровня. Мосты выполняются на основе компьютера, оснащенного соответствующим
программным обеспечением. Отличие коммутаторов от мостов в том, что они реализуют свои функции аппаратными средствами и поэтому обладают значительно более высоким быстродействием.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для мостов сеть представляется набором МАС-адресов устройств. Они извлекают эти адреса из заголовков, добавленных к пакетам на канальном уровне, и используют их во время обработки пакетов для принятия решения о том, на какой порт отправить тот или иной пакет. Мосты не имеют доступа к информации об адресах сетей, относящейся к более высокому уровню. Поэтому они ограничены в принятии решений о возможных путях или маршрутах перемещения пакетов по сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы глобальных сетей (например, АТМ), работающие на основе технологии виртуальных каналов, могут поддерживать как два уровня протоколов, так и три. Протокол сетевого уровня нужен им в том случае, если они поддерживают процедуры автоматического установления виртуальных каналов. Так как топология глобальных сетей произвольная, без сетевого протокола обойтись нельзя. Если же виртуальные соединения устанавливаются администраторами сети вручную, то коммуникатору глобальной сети достаточно поддерживать только протоколы физического и канального уровней, чтобы передавать данные по уже проложенным виртуальным каналам.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизаторы должны поддерживать протоколы всех трех уровней, так как сетевой уровень нужен им для объединения сетей различных топологий, а протоколы нижних уровней – для взаимодействия с конкретными сетями, образующими составную сеть, например Ethernet или Frame Relay. Работают маршрутизаторы на сетевом уровне модели OSI. Для маршрутизаторов сеть представляется набором сетевых адресов устройств и множеством сетевых путей. Маршрутизаторы анализируют все возможные пути между любыми двумя узлами сети и выбирают самый короткий из них.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Компьютеры, на которых работают сетевые приложения, должны поддерживать протоколы всех уровней. Протоколы прикладного уровня, пользуясь сервисами протоколов уровня представления и сеансового уровня, представляют приложениям набор сетевых услуг в виде сетевого прикладного программного интерфейса (API). Протокол транспортного уровня также работает на всех конечных узлах. При передаче данных через сеть два модуля  транспортного протокола, работающие на узле - отправителе и узле – получателе, взаимодействуют друг с другом для поддержания транспортного сервиса нужного качества. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммуникационные устройства сети переносят сообщения транспортного протокола прозрачным образом, не вникая в их содержание.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В компьютерах коммуникационные протоколы всех уровней  (кроме физического и части функций канального уровня) реализуются программно операционной системой или системными приложениями.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Конечные узлы сети (компьютеры и компьютеризированные устройства, например мобильные телефоны) всегда представляют как информационные, так и транспортные услуги,  а промежуточные узлы сети – только транспортные.</p>
</font>
<p align="center">
		<a name="4.2"><font class="big"> 4.2 Структуризация как средство построения больших сетей</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В сетях с небольшим (10-30) количеством компьютеров чаще всего используется одна из типовых топологий - общая шина, кольцо, звезда или полносвязная сеть. Все перечисленные топологии обладают свойством однородности, то есть все компьютеры в такой сети имеют одинаковые права в отношении доступа к другим компьютерам (за исключением центрального компьютера при соединении звезда). Такая однородность структуры делает простой процедуру наращивания числа компьютеров, облегчает обслуживание и эксплуатацию сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Однако при построении больших сетей однородная структура связей превращается из преимущества в недостаток. В таких сетях использование типовых структур порождает различные ограничения, важнейшими из которых являются:
<ul>
<li>ограничения на длину связи между узлами;</li>
<li>ограничения на количество узлов в сети;</li>
<li>ограничения на интенсивность трафика, порождаемого узлами сети.</li>
</ul>
</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Например, технология Ethernet на тонком коаксиальном кабеле позволяет использовать кабель длиной не более 185 метров, к которому можно подключить не более 30 компьютеров. Однако, если компьютеры интенсивно обмениваются информацией между собой, иногда приходится снижать число подключенных к кабелю компьютеров до 20, а то и до 10, чтобы каждому компьютеру доставалась приемлемая доля общей пропускной способности сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для снятия этих ограничений используются специальные методы структуризации сети и специальное структурообразующее оборудование - повторители, концентраторы, мосты, коммутаторы, маршрутизаторы. Оборудование такого рода также называют коммуникационным, имея в виду, что с помощью него отдельные сегменты сети взаимодействуют между собой.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Различают:
<ol>
<li>Топологию физических связей (физическую структуру сети). В этом случае конфигурация физических связей определяется электрическими соединениями компьютеров, то есть ребрам графа соответствуют отрезки кабеля, связывающие пары узлов.</li>
<li>Топологию логических связей (логическую структуру сети). Здесь в качестве логических связей выступают маршруты передачи данных между узлами сети, которые образуются путем соответствующей настройки коммуникационного оборудования/</li>
</ol>
</p>
</font>
<p align="center">
		<a name="4.2.1"><font class="big"> 4.2.1 Физическая структуризация сети</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для построения простейшей односегментной сети достаточно иметь сетевые адаптеры и кабель подходящего типа. Но даже в этом простом случае часто используются дополнительные устройства - повторители сигналов, позволяющие преодолеть ограничения на максимальную длину кабельного сегмента.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Основная функция <em>повторителя</em> (repeater), как это следует из его названия - повторение сигналов, поступающих на один из его портов, на всех остальных портах (Ethernet) или на следующем в логическом кольце порте (Token Ring, FDDI) синхронно с сигналами-оригиналами.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Многопортовый повторитель часто называют <em>концентратором</em> (hub, concentrator), что отражает тот факт, что данное устройство реализует не только функцию повторения сигналов, но и концентрирует в одном центральном устройстве функции объединения компьютеров в сеть. Практически во всех современных сетевых стандартах концентратор является необходимым элементом сети, соединяющим отдельные компьютеры в сеть.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Повторитель используется для физического соединения различных сегментов кабеля локальной сети с целью увеличения общей длины сети. Повторитель передает сигналы, приходящие из одного сегмента сети, в другие ее сегменты. Повторитель позволяет преодолеть ограничения на длину линий связи за счет улучшения качества передаваемого сигнала - восстановления его мощности и амплитуды, улучшения фронтов и т. п.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Концентраторы характерны практически для всех базовых технологий локальных сетей - Ethernet, Token Ring, FDDI, Fast Ethernet, Gigabit Ethernet, l00VG-AnyLAN.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Следует особо подчеркнуть, что какую бы сложную структуру не образовывали концентраторы, например, путем иерархического соединения, все компьютеры, подключенные к ним, образуют единый логический сегмент, в котором любая пара взаимодействующих компьютеров полностью блокирует возможность обмена данными для других компьютеров.</p>
</font>
<p align="center">
		<a name="4.2.2"><font class="big"> 4.2.2 Логическая структуризация сети</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Физическая структуризация сети полезна во многих отношениях, однако в ряде случаев, обычно относящихся к сетям большого и среднего размера, невозможно обойтись без логической структуризации сети. Наиболее важной проблемой, не решаемой путем физической структуризации, остается проблема перераспределения передаваемого трафика между различными физическими сегментами сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Сеть с типовой топологией (шина, кольцо, звезда), в которой все физические сегменты рассматриваются в качестве одной разделяемой среды, оказывается неадекватной структуре информационных потоков в большой сети. Например, в сети с общей шиной взаимодействие любой пары компьютеров занимает ее на все время обмена, поэтому при увеличении числа компьютеров в сети шина становится узким местом. Компьютеры одного отдела вынуждены ждать, когда окончит обмен пара компьютеров другого отдела, и это при том, что необходимость в связи между компьютерами двух разных отделов возникает гораздо реже и требует совсем небольшой пропускной способности.</p>
<p align="center"><img src="img/chapter4/4.3.jpg"/></p>
<p align="center">Рисунок 4.3 - Физическая структуризация на основе концентраторов</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Этот случай иллюстрирует рисунок 4.3. Здесь показана сеть, построенная с использованием концентраторов. Пусть компьютер А, находящийся в одной подсети с компьютером В, посылает ему данные. Несмотря на разветвленную физическую структуру сети, концентраторы распространяют любой кадр по всем ее сегментам. Поэтому кадр, посылаемый компьютером А компьютеру В, хотя и не нужен компьютерам отделов 2 и 3, в соответствии с логикой работы концентраторов поступает на эти сегменты тоже (на рисунке кадр, посланный компьютером А, показан в виде заштрихованного кружка, который повторяется на всех сетевых интерфейсах данной сети).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;И до тех пор, пока компьютер В не получит адресованный ему кадр, ни один из компьютеров этой сети не сможет передавать данные. Такая ситуация возникает из-за того, что логическая структура данной сети осталась однородной - она никак не учитывает увеличение интенсивности трафика внутри отдела и предоставляет всем парам компьютеров равные возможности по обмену информацией.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Решение проблемы состоит в отказе от идеи единой однородной разделяемой среды. Например, в рассмотренном выше примере желательно было бы сделать так, чтобы кадры, которые передают компьютеры отдела 1, выходили бы за пределы этой части сети в том и только в том случае, если эти кадры направлены какому-либо компьютеру из других отделов. С другой стороны, в сеть каждого из отделов должны попадать те и только те кадры, которые адресованы узлам этой сети. При такой организации работы сети ее производительность существенно повыситься, так как компьютеры одного отдела не будут простаивать в то время, когда обмениваются данными компьютеры других отделов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Нетрудно заметить, что в предложенном решении было решено отказаться от идеи общей разделяемой среды в пределах всей сети, хотя и оставили ее в пределах каждого отдела. Распространение трафика, предназначенного для компьютеров некоторого сегмента сети, только в пределах этого сегмента, называется локализацией трафика.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ограничения, возникающие из-за использования единой разделяемой среды, можно преодолеть, выполнив логическую структуризацию сети, то есть сегментировать единую разделяемую среду на несколько и, соединив полученные сегменты сети некоторым коммуникационным устройством, которое не передает данные побитно, как повторитель, а буферизует кадры и передает их затем в тот или иной сегмент в зависимости от адреса назначения кадра (рисунок 4.4).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Логическая структуризация сети</em> - это процесс разбиения сети на сегменты с локализованным трафиком</p>
<p align="center"><img src="img/chapter4/4.4.jpg"/></p>
<p align="center">Рисунок 4.4 - Логическая структуризация сети</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для логической структуризации сети используются такие коммуникационные устройства, как мосты, коммутаторы, маршрутизаторы и шлюзы.</p>
</font>
<p align="center">
		<a name="4.3"><font class="big"> 4.3 Мосты</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мост локальной сети (LAN bridge), или просто мост, появился как средство построения крупных локальных сетей на разделяемой среде, так как в рамках того, что в стандартах сетей на разделяемой среде называется сетью, построить действительно крупную сеть практически невозможно, поскольку такая сеть подразумевает существование единой разделяемой среды.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В сети Ethernet требование использовать единую разделяемую среду приводит к очень жестким ограничениям:
<ul>
<li>общий диаметр сети не может быть больше 2500 м;</li>
<li>количество узлов не может превышать 1024 (для сетей Ethernet, построенных на коаскиале это ограничение 30-100).</li>
</ul>
</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Процессы, происходящие в локальных сетях на разделяемой среде, качественно могут быть описаны моделями массового обслуживания, в частности моделью M/M/1. Разделяемая среда соответствует обслуживающему устройству этой модели, а кадры, генерируемые каждым компьютером сети, заявкам на обслуживание. Очередь заявок в действительности распределяется по компьютерам сети, где кадры ожидают своей очереди на использование среды.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Хотя модель М/М/1 не может адекватно отразить многие особенности локальных сетей на разделяемой среде, например коллизии, возникающие в Ethernet, она хорошо иллюстрирует качественную картину зависимости задержек доступа к среде от коэффициента использования среды. На рисунке 4.5 показаны зависимости этого типа, полученные для сетей Ethernet, Token Ring и FDDI путем имитационного моделирования.</p>
<p align="center"><img src="img/chapter4/4.5.jpg"/></p>
<p align="center">Рисунок 4.5 - Задержки доступа к среде передачи данных для технологии Ethernet, Token Ring</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как видно из рисунка, всем технологиям присуща качественно одинаковая картина экспоненциального роста величины задержек доступа при увеличении коэффициента использования сети. Однако их отличает порог, при котором наступает резкий перелом в поведении сети, когда почти прямолинейная зависимость переходит в экспоненциальную. Для всего семейства технологий Ethernet это – 30-50% (сказывается эффект коллизий), для технологии Token Ring -  60%, а для технологии FDDI – 70-80%.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Количество узлов, при которых коэффициент использования сети начинает приближаться к опасной границе, зависит от типа функционирующих в узлах приложений. Для сетей Ethernet со скоростью 10 Мбит/c считалось, что 30 узлов - это вполне приемлемое число для одного разделяемого сегмента, так что для построения крупной сети нужны были принципиально новые решения.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мост долгое время был основным типом устройств, которые использовались для логической структуризации локальных сетей. Сейчас мосты заменили коммутаторы, но так как алгоритм их работы повторяет алгоритм работы моста, результаты их применения имеют туже природу, они только усиливаются за счет гораздо более высокой производительности коммутаторов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Помимо мостов/коммутаторов для структуризации локальных сетей можно использовать маршрутизаторы, но они являются более сложными и дорогими устройствами, к тому, же всегда требующими ручного конфигурирования, поэтому их применение в локальных сетях ограничено.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Логическая структуризация локальной сети позволяет решить несколько задач, основные из которых – это повышение производительности, гибкости и безопасности, а также улучшение управляемости сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.6 представлена иллюстрация эффекта повышения производительности, который является главной целью логической структуризации. На данном рисунке показаны два сегмента Ethernet, соединенные мостом. Внутри сегментов имеются повторители. До деления сети на сегменты весь трафик, генерируемый узлами сети, является общим (вместо моста использовался повторитель) и учитывался при определении коэффициента использования сети. Если обозначить среднюю интенсивность трафика, идущего от узла i к j, через C<sub>ij</sub>, то суммарный трафик, который должна была передавать сеть до деления на сегменты, равен C&sum;=&sum;C<sub>ij</sub> (считается, что суммирование проводится по все узлам).</p>
<p align="center"><img src="img/chapter4/4.6.jpg"/></p>
<p align="center">Рисунок 4.6 - Изменение загрузки сети на сегменты</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;После разделения сети на сегменты была подсчитана отдельно для каждого сегмента. Например, нагрузка сегмента S1 стала равна СS1+ СS1 -S2, где СS1 – внутренний трафик сегмента S1, а СS1 -S2 – межсегментный трафик. Чтобы показать, что загрузка сегмента S1 стала меньше, чем загрузка исходной сети, замечено, что общую нагрузку сети до разделения на сегменты можно представить в виде:</p>
<p align="center">C&sum;= С<sub>S1</sub>+ С<sub>S1-S2</sub>+С<sub>S2</sub></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Значит, загрузка сегмента S1 после разделения стала равной C&sum;- СS2, то есть стала меньше на величину внутреннего трафика сегмента S2. Следовательно, в соответствии с графиками, приведенными на рисунке 4.5, задержки в сегментах уменьшились, а полезная пропускная способность, приходящаяся на один узел, увеличилась.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как уже известно, деление сети на логические сегменты почти всегда снижает загрузку новых сегментов. Термин "почти" учитывает очень редкий случай, когда сеть разбита на сегменты, так что внутренний трафик каждого сегмента оказывается нулевым, то есть весь трафик является межсегментным. Для примера на рисунке на рисунке 3.5 это означало бы, что все компьютеры сегмента S1 обмениваются данными только с компьютерами сегмента S2, и наоборот.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На практике в сети всегда можно выделить группу компьютеров, которые принадлежат сотрудникам, решающим общую задачу. Это могут быть сотрудники одной рабочей группы, отдела, другого структурного подразделения предприятия. В большинстве случаев им нужен доступ к ресурсам сети их отдела и только изредка – доступ к удаленным ресурсам.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Раньше существовало эмпирическое правило, говорящее о том, что сеть можно разделить на сегменты так, что 80% трафика составят обращения к локальным ресурсам и только 20% - к удаленным. Сегодня такая закономерность не всегда соответствует действительности, она может трансформироваться в правило 50% на 50% и даже 20% на 80%. Тем не менее, в любом случае внутрисегментный трафик существует. Если его нет, значит, сеть разбита на логические сегменты неверно.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При построении сети как совокупности сегментов каждый из них может быть адаптирован к специфическим потребностям рабочей группы или отдела. Это означает повышение гибкости сети. Процесс разбиения сети на логические сегменты можно рассматривать и в обратном направлении, как процесс создания большой сети из уже имеющихся небольших сетей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Устанавливая различные логические фильтры на мостах/коммутаторах, можно контролировать доступ пользователей к ресурсам других сегментов, чего не позволяют делать повторители. Так достигается повышение безопасности данных.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Побочным эффектом снижения трафика и повышения безопасности данных является упрощение управления сетью, то есть улучшение управляемости сети. Проблемы очень часто локализуются внутри сегмента. Сегменты образуют логические домены управления сетью.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Оба описываемых устройства продвигают кадры на основании одного и того же алгоритма, а именно алгоритма прозрачного моста.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Этот стандарт, разработанный задолго до появления первого коммутатора, описывал работу моста, поэтому совершенно естественно, что в его названии и содержании используется термин "мост".
Хотя мосты, для которых алгоритм был разработан, сегодня уже относятся  к "вымершему" виду коммуникационных устройств, в стандартах, описывающих работу коммутаторов, следуя традиции, используют термин "мост".
</p>
</font>
<p align="center">
		<a name="4.3.1"><font class="big"> 4.3.1 Алгоритм прозрачного моста</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В локальных сетях применялись следующие типы мостов:
<ul>
<li>прозрачные мосты</li>
<li>мосты с маршрутизацией от источника</li>
<li>транслирующие мосты</li>
</ul>
</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мосты с маршрутизацией от источника применялись только в сетях Token Ring, а транслирующие мосты были способны соединять сегменты разных технологий, например Ethernet и Token Ring. В результате исчезновения всех технологий локальных сетей, кроме Ethernet, оба типа мостов также исчезли, а алгоритм прозрачного моста выжил, найдя свое применение в коммутаторах Ethernet.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Слово "прозрачный" в названии "алгоритм прозрачного моста" отражает тот факт, что мосты и коммутаторы в своей рабочей группе не учитывают существование в сети сетевых адаптеров конечных узлов, концентраторов и повторителей. В то же время и перечисленные сетевые устройства функционируют, "не замечая" присутствия в сети мостов и коммутаторов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Так как алгоритм прозрачного моста остался единственным актуальным алгоритмом мостов, то сейчас опускается термин "прозрачный", подразумевая именно этот тип работы моста/коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мост строит свою таблицу продвижения (адресную таблицу) на основании пассивного наблюдения за трафиком, циркулирующим в подключенных к его портам сегментах. При этом мост учитывает адреса источников кадров данных, поступающих на его порты. По адресу источника кадра мост делает вывод о принадлежности узла-источника тому или иному сегменту сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Необходимо отметить, что каждый порт моста работает, как конечный узел своего сегмента, за одним исключением – порт моста может не иметь собственного MAC-адреса. Порты мостов не нуждаются в адресах для продвижения кадров, так как они работают в режиме неразборчивого захвата кадров, когда все поступающие на порт кадры, независимо от их адреса назначения. Запоминаются на время в буферной памяти. Работая в неразборчивом режиме, мост "слушает" весь трафик, передаваемый в присоединенных к нему сегментах, и использует проходящие через него кадры для изучения топологии сети и построения таблицы продвижения. В том случае, когда порт моста/коммутатора имеет собственный MAC-адрес, он используется для целей, отличных от продвижения кадров, чаще всего – для удаленного управления портом: в этом случае порт представляет собой конечный узел сети, и кадры адресуются непосредственно ему.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.7, на примере простой сети, представлен процесс автоматического создания таблицы продвижения моста и ее использования.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p align="center"><img  src="img/chapter4/4.7.jpg"/></p>
<p align="center">Рисунок 4.7 - Принцип работы прозрачного моста/коммутатора</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Мост соединяет на два сетевых сегмента. Сегмент 1 составляют компьютеры, подключенные с помощью одного отрезка коаксиального кабеля к порту 1 моста, а сегмент 2 – компьютеры, подключенные с помощью другого отрезка кабеля к порту 2 моста.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В исходном состоянии мост не знает о том, компьютеры с какими адресами подключены к каждому из его портов. В этой ситуации мост просто передает любой захваченный и буферизованный кадр на все свои порты за исключением того, от которого этот кадр получен. В приведенном выше примере, у моста только два порта, поэтому он передает кадры с порта 1 на порт 2, и наоборот. Отличие работы моста в этом режиме от повторителя заключается в том, что он передает кадр, предварительно буферизуя его, а не бит за битом, как это делает повторитель. Буферизация раскрывает логику работы всех сегментов как единой разделяемой среды. Когда мост собирается передать кадр с сегмента на сегмент, например с сегмента 1 на сегмент 2, он, как обычный конечный узел, пытается получить доступ к разделяемой среде сегмента 2 по правилам алгоритма доступа, а данном примере – по правилам алгоритма CSMA/СD.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Одновременно с передачей кадра на все порты мост изучает адрес источника кадра и делает запись о его принадлежности к тому или иному сегменту в своей адресной таблице. Эту таблицу также называют таблицей фильтрации, или продвижения. Например, получив на порт 1 кадр от компьютера 1, мост делает новую запись в своей адресной таблице: MAC-адрес 1 – порт 1.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Эта запись означает, что компьютер, имеющий MAC-адрес 1, принадлежит сегменту, подключенному к порту 1 коммутатора. Если все четыре компьютера данной сети проявляют активность и посылают друг другу кадры, то скоро мост построит полную адресную таблицу сети, состоящую из 4-х записей – по одной записи на узел (рисунок 4.6).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;вставить со стр 106</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Процесс обучения моста никогда не заканчивается и происходит одновременно с продвижением и фильтрацией кадров. Мост постоянно следит за адресами источника буферизуемых кадров, чтобы автоматически приспосабливаться к изменениям, происходящим в сети, - перемещениям компьютеров из одного сегмента сети в другой, отключению и появлению новых компьютеров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Входы адресной таблицы могут быть динамическими, создаваемыми в процессе самообучения моста, и статическими, создаваемыми вручную администраторами сети. Статические записи не имеют срока жизни, что дает администратору возможность влиять на работу моста, например, ограничивая передачу кадров с определенными адресами из одного сегмента в другой.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Динамические записи имеют срок жизни – при создании или обновлении записи в адресной таблице с ней связывается отметка времени. По истечении определенного тайм-аута запись помечается как недействительная, если за это время мост не принял ни одного кадра с данным адресом в поле адреса источника. Это дает возможность мосту автоматически реагировать на перемещения компьютера из сегмента в сегмент – при его отключении от старого сегмента запись о принадлежности компьютера из сегменту со временем вычеркивается из адресной таблицы. После подключения компьютера к другому сегменту его кадры начнут попадать в буфер моста через другой порт, и в адресной таблице появится новая запись, соответствующая текущему состоянию сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кадры с широковещательными MAC-адресами, как и все кадры с неизвестными адресами назначения, передаются мостом на все его порты. Такой режим распространения кадров называется затоплением сети. Наличие мостов в сети не препятствует распространению широковещательных кадров по всем сегментам сети. Однако это является достоинством только тогда, когда широковещательный адрес выработан корректно работающим узлом.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Нередко в результате каких-либо программных или аппаратных сбоев протокол верхнего уровня или сетевой адаптер начинает работать некорректно, а именно постоянно с высокой интенсивностью генерировать кадры с широковещательным адресом. Мост в соответствии со своим алгоритмом передает ошибочный трафик во все сегменты. Такая ситуация называется широковещательным штормом.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;К сожалению, мосты не защищают сети от широковещательного шторма, во всяком случае, по умолчанию, как это делают маршрутизаторы. Максимум, что может сделать администратор с помощью коммутатора для борьбы с широковещательным штормом – установить для каждого порта моста предельно допустимую интенсивность передачи кадров с широковещательным адресом. Но при этом нужно точно знать, какая интенсивность является нормальной, а какая – ошибочной. При смене протоколов ситуация может измениться, и то что вчера считалось ошибочным, сегодня может оказать нормой.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.8 показана типичная структура моста. Функции доступа к среде при приеме и передаче кадров выполняют микросхемы MAC, которые идентичны микросхемам сетевого адаптера.</p>
<p align="center"><img src="img/chapter4/4.8.jpg"/></p>
<p align="center">Рисунок 4.8 – Структура моста/коммутатора</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Протокол, реализующий алгоритм коммутатора, располагается между уровнями MAC и LLC.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.9 показана копия экрана терминала с адресной таблицей моста.</p>
<p align="center"><img src="img/chapter4/4.9.jpg"/></p>
<p align="center">Рисунок 4.9 – Адресная таблица коммутатора</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Из выводимой на экран адресной таблицы видно, что сеть состоит из двух сегментов – LAN A и LAN B. В сегменте LAN A имеются, по крайней мере, 3 станции, а в сегменте LAN B – 2 станции. Четыре адреса, помеченные звездочками, являются статическими, то есть назначенными администратором вручную. Адрес, помеченный плюсом, является динамическим адресом с истекшим сроком жизни.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Таблица имеет поле Dispn – "disposition" (это "распоряжение" мосту о том, какую операцию нужно проделать с кадром, имеющим данный адрес назначения). Обычно при автоматическом составлении таблицы  в этом поле ставится условное обозначение порта назначения, но при ручном задании адреса в это поле можно внести нестандартную операцию обработки кадра. Например, операция Flood ("затопление") заставляет мост распространять кадр в широковещательном режиме, несмотря на то, что его адрес назначения не является широковещательным. Операция Discard ("отбросить") говорит мосту, что кадр с таким адресом не нужно передавать на порт назначения. Вообще говоря, операции, задаваемые в поле Disp, определяют особые условия фильтрации кадров, дополняющие стандартные условия их распространения. Такие условия обычно называются пользовательскими фильтрами.</p>
</font>
<p align="center">
		<a name="4.3.2"><font class="big"> 4.3.2 Топологические ограничения при применении мостов в локальных сетях</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Серьезным ограничением функциональных возможностей мостов и коммутаторов является отсутствие петлеобразных конфигураций сети. То ограничение представлено  на рисунке 4.10.</p>
<p align="center"><img src="img/chapter4/4.10.jpg"/></p>
<p align="center">Рисунок 4.10 – Влияние замкнутых маршрутов на работу коммутатора</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Два сегмента Ethernet параллельно соединены двумя мостами, так что образовалась петля. Пусть новая станция с MAC-адресом 123 впервые начинает работу в данной сети. Обычно начало работы в любой операционной системе сопровождается рассылкой широковещательных кадров, в которых станция заявляет о своем существовании и одновременно ищет серверы сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На этапе 1 станция посылает первый кадр с широковещательным адресом назначения и адресом источника 123 в свой сегмент. Кадр попадает в мост 1, так и в мост 2. В обоих мостах новый адрес источника 123 заносится в адресную таблицу с пометкой о его принадлежности сегменту 1, то есть создается новая запись вида:</p>
<p style="text-align:center">MAC-адрес 123 – Порт 1.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Так как адрес назначения широковещательный, то каждый мост должен передать кадр на сегмент 2. Эта задача происходит поочередно в соответствии с методом случайного доступа технологии Ethernet. Пусть первым доступ к сегменту 2 получает мост 1 (этап 2 на рисунке 4.10). При появлении кадра на сегменте 2 мост 2 принимает его в свой буфер и обрабатывает. Он видит, что адрес 123 уже есть в его адресной таблице, но пришедший кадр является более свежим, и он решает, что адрес 123 принадлежит сегменту 2, а не 1. Поэтому мост 2 корректирует содержимое базы и делает запись о том, что адрес 123 принадлежит сегменту 2:</p>
<p style="text-align:center">MAC-адрес 123 – Порт 2.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Аналогично поступает мост 1, когда мост 2 передает свою копию кадра на сегмент 2. Далее перечислены последствия наличия петли в сети:
<ul>
<li>"размножение" кадра, то есть появление нескольких копий (в данном случае – двух, но если бы сегменты были соединены тремя мостами – то трех и т.д.)</li>
<li>бесконечная циркуляция обеих копий кадра по петле в противоположных направлениях, а значит, засорение сети ненужным трафиком,</li>
<li>постоянная перестройка мостами своих адресных таблиц, так как кадр с адресом источника 123 будет являться то на одном порту, то на другом.</li>
</ul></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В целях исключения все этих нежелательных эффектов мосты/коммутаторы нужно применять так, чтобы между логическими сегментами не было петель, то есть строить с помощью коммутаторов только древовидные структуры, гарантирующие наличие единственного пути между любыми двумя сегментами. Тогда кадры от каждой станции будут поступать на мост/коммутатор всегда с одного и того же порта, и коммутатор сможет правильно решать задачу выбора рационального маршрута в сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В небольших сетях сравнительно легко гарантировать наличие одного и только одного пути между двумя сегментами. Но когда количество соединений возрастает, то вероятность непреднамеренного образования петли оказывается высокой.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Возможна и другая причина возникновения петель. Так, для повышения надежности желательно иметь между мостами/коммутаторами резервные связи, которые не участвуют в нормальной работе основных связей по передаче информационных кадров станций, но при отказе какой-либо основной связи образуют новую связную рабочую конфигурацию без петель.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Избыточные связи необходимо блокировать, то есть переводить их в неактивное состояние. В сетях в простой топологией эта задача решается вручную путем блокирования соответствующих портов мостов/коммутаторов. В больших сетях со сложными связями используются алгоритмы, которые позволяют решать задачу обнаружения петель автоматически. Наиболее известным из них является стандартный алгоритм покрывающего дерева.</p>
</font>
<p align="center">
		<a name="4.4"><font class="big"> 4.4 Коммутатор</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Современные коммутаторы Ethernet являются наследниками мостов локальных сетей, которые широко использовались в сетях Ethernet и Token Ring на разделяемой среде. Более того, коммутаторы Ethernet по-прежнему функционально очень близки к вышедшим из употребления мостам, так как базовый алгоритм работы коммутатора и моста является одним и тем же алгоритмом и определяется одним и тем же стандартом. Основное отличие коммутатора от моста состоит в большем количестве портов (мост, как правило, имел два порта, что и послужило поводом для его названия – мост между двумя сегментами) и более высокой производительности.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы являются сегодня основным типом коммуникационных устройств, применяемых для построения локальных сетей. Коммутаторы отличаются внутренней архитектурой и конструктивным исполнением.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Коммутатор (switch, switching hub)</em> по принципу обработки кадров ничем не отличается от моста. Основное его отличие от моста состоит в том, что он является своего рода коммуникационным мультипроцессором, так как каждый его порт оснащен специализированным процессором, который обрабатывает кадры по алгоритму моста независимо от процессоров других портов. За счет этого общая производительность коммутатора обычно намного выше производительности традиционного моста, имеющего один процессорный блок. Можно сказать, что коммутаторы - это мосты нового поколения, которые обрабатывают кадры в параллельном режиме.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Разница между мостом и коммутатором состоит в том, что мост в каждый момент времени может осуществлять передачу кадров только между одной парой портов, а коммутатор одновременно поддерживает потоки данных между всеми своими портами. Другими словами, мост передает кадры последовательно, а коммутатор параллельно. Следует отметить, что в последнее время локальные мосты полностью вытеснены коммутаторами. Мосты используются только для связи локальных сетей с глобальными, то есть как средства удаленного доступа, поскольку в этом случае необходимость в параллельной передаче между несколькими парами портов просто не возникает.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы принимают решение о том, на какой порт нужно передать кадр, анализируя адрес назначения, помещенный в кадре, а также на основании информации о принадлежности того или иного компьютера определенному сегменту, подключенному к одному из портов коммутатора, то есть на основании информации о конфигурации сети. Для того, чтобы собрать и обработать информацию о конфигурации подключенных к нему сегментов, коммутатор должен пройти стадию "обучения", то есть самостоятельно проделать некоторую предварительную работу по изучению проходящего через него трафика. Определение принадлежности компьютеров сегментам возможно за счет наличия в кадре не только адреса назначения, но и адреса источника, сгенерировавшего пакет. Используя информацию об адресе источника, коммутатор устанавливает соответствие между номерами портов и адресами компьютеров. В процессе изучения сети коммутатор просто передает появляющиеся на входах его портов кадры на все остальные порты, работая некоторое время повторителем. После того, как коммутатор узнает о принадлежности адресов сегментам, он начинает передавать кадры между портами только в случае межсегментной передачи. Если, уже после завершения обучения, на входе коммутатора вдруг появится кадр с неизвестным адресом назначения, то этот кадр будет повторен на всех портах.</p>
</font>
<p align="center">
		<a name="4.4.1"><font class="big"> 4.4.1 Параллельная коммутация</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При появлении в конце 80-х начале 90-х годов быстрых протоколов, производительных персональных компьютеров, мультимедийной информации и разделения сети на большое количество сегментов, классические мосты перестали справляться с работой. Обслуживание потоков кадров между теперь несколькими портами с помощью одного процессорного блока требовало значительного повышения быстродействия процессора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Более эффективным оказалось решение, которое "породило" коммутаторы: для обслуживания потока, поступающего на каждый порт, в устройство ставился отдельный специализированный процессор, который реализовывал алгоритм прозрачного моста. По сути, коммутатор – это мультипроцессорный мост, способный параллельно продвигать кадры сразу между всеми парами своих портов. Но если, при добавлении процессорных блоков компьютер не перестали называть компьютером, то мультипроцессорными мостами стали называть коммутаторы. При этом, помимо, процессоров портов коммутатор имеет центральный процессор, который координирует работу портов, отвечая за построение общей таблицы продвижения, а также поддерживая функции конфигурирования и управления коммутатором. Со временем коммутаторы вытеснили классические однопроцессорные мосты.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Производительность коммутаторов на несколько порядков выше, чем мостов – коммутаторы могут передавать до несколько десятков, а иногда и сотен миллионов кадров в секунду, в то время как мосты обычно обрабатывают 3-5 тысяч кадров в секунду.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;За время своего существования коммутаторы вобрали в себя многие дополнительные функции, родившиеся в результате естественного развития сетевых технологий. К этим функциям относятся, например, поддержка виртуальных сетей (VLAN), агрегирование линий связи, приоритезация трафика и.т. п. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Технология коммутации сегментов Ethernet была предложена небольшой компанией Kalpha в 1990 году в ответ на растущие потребности в повышении пропускной способности связей высокопроизводительных серверов с сегментами рабочих станций. У коммутатора компании Kalpha при свободном в момент приема кадра состоянии выходного порта задержка между получением первого байта и появлением этого же байта на выходе порта адреса назначения составляла всего 40 мкс, что было гораздо ниже задержки кадра при его передаче мостом.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Структурная схема коммутатора EtherSwitch, предложенного фирмой Kalpha, представлена на рисунке 4.11.</p>
<p align="center"><img src="img/chapter4/4.11.jpg"/></p>
<p align="center">Рисунок 4.11 – Структура коммутатора EtherSwitch компании Kalpha</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Каждый из 8 портов 10Base-T обслуживается одним процессором пакетов Ethernet (Etnernet Packet Processor, EPP). Кроме того, коммутатор имеет системный модуль, который координирует работу всех процессоров EPP, в частности ведет общую адресную таблицу коммутатора. Для передачи кадров между портами используется коммутационная матрица. Она функционирует по принципу коммутации каналов, соединяя порты коммутатора. Для 8 портов матрица может одновременно обеспечить 8 внутренних каналов при полудуплексном режиме и 16 – при дуплексном, когда передатчик и приемник каждого порта работают независимо друг от друга.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При поступлении кадра в какой-либо порт соответствующий процессор EPP буферизует несколько первых байтов кадра, чтобы прочитать адрес назначения. После получения адреса назначения процессор сразу же приступает к обработке кадра, не дожидаясь прихода остальных его байтов.</p>
<ol>
<li>Процессор EPP просматривает свой кеш адресной таблицы, и если не находит там нужного адреса, обращается к системному модулю, который работает в многозадачном режиме, параллельно обслуживая запросы всех процессоров EPP. Системный модуль производит просмотр общей адресной таблицы и возвращает процессору найденную  строку, которую тот буферизует в своем кеше для последующего использования.</li>
<li>Если адрес назначения найден в адресной таблице и кадр нужно отфильтровать, процессор просто прекращает записывать в буфер байты кадры, очищает буфер и ждет поступления нового кадра.</li>
<li>Если же адрес найден и кадр нужно передать на другой порт, процессор, продолжая прием кадра в буфер, обращается к коммутационной матрице, пытаясь установить в ней путь, связывающий его порт с портом, через который идет маршрут к адресу назначения. Коммутационная матрица способна помочь только в том случае, если порт адреса назначения в этот момент свободен, то есть, не соединен с другим портом данного коммутатора.</li>
<li>Если же порт занят, то, как и в любом устройстве с коммутацией каналов, матрица в соединении отказывает. В этом случае кадр полностью буферизуется процессором входного порта, после чего процессор ожидает освобождения выходного порта и образования коммутационной матрицей нужного пути.</li>
<li>После того, как нужный путь установлен, в него направляются буферизованные байты кадра, которые принимаются процессором выходного порта. Как только процессор выходного порта получает доступ к подключенному к нему сегменту Ethernet по алгоритму CSMA/CD, байты кадра сразу же начинают передаваться в сеть. Процессор входного порта постоянно хранит несколько байтов принимаемого кадра в своем буфере, что позволяет ему независимо и асинхронно принимать и передавать байты кадра (рисунок 4.12).</li>
</ol>
<p align="center"><img src="img/chapter4/4.12.jpg"/></p>
<p align="center">Рисунок 4.12 – Передача кадра через коммутационную матрицу</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Описанный способ передачи кадра без его полной буферизации получил название коммутацией "на лету" или "напролет". Это способ представляет собой, по сути, конвейерную обработку кадра, когда частично совмещаются во времени несколько этапов его передачи.</p>
<ol>
<li>Прием первых байтов кадра процессором входного порта, включая прием байтов адреса назначения.</li>
<li>Поиск адреса назначения в адресной таблице коммутатора (в кеше процессора или в общей таблице системного модуля).</li>
<li>Коммутация матрицы.</li>
<li>Прием остальных байтов кадра процессором входного порта.</li>
<li>Прием байтов кадра (включая первые) процессором выходного порта через коммутационную матрицу.</li>
<li>Получение доступа к среде процессором выходного порта.</li>
<li>Передача байтов кадра процессором выходного порта в сеть.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.13 представлены два режима обработки кадра: режим коммутации "на лету" с частичным совмещением во времени нескольких этапов и режим полной буферизации кадра с последовательным выполнением всех этапов. При этом, этапы 2 и 3 совместить во времени нельзя, так как без знания номера выходного порта операция коммутации матрицы не имеет смысла.</p>
<p align="center"><img src="img/chapter4/4.13.jpg"/></p>
<p align="center">Рисунок 4.13 – Экономия времени при конвейерной обработке кадра: а –конвейерная обработка, б – обычная обработка с полной буферизацией</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как показывает схема, экономия от конвейерной обработки получается ощутимой. Однако главной причиной повышения производительности сети при использовании коммутатора является параллельная обработка нескольких кадров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Этот эффект иллюстрирует рисунок 4.14, на котором показана идеальная, в отношении производительности, ситуация, когда четыре порта из восьми передают данные с максимальной для протокола Ethernet скоростью 10 Мбит/с. Причем они передают эти данные на остальные четыре порта не конфликтуя: потоки данных между узлами сети распределились так, что для каждого принимающего кадры порта есть свой выходной порт. Если коммутатор успевает обрабатывать входной трафик при максимальной интенсивности поступления кадров на входные порты, то общая производительность коммутаторов в приведенном примере составит 4*10=40 Мбит/с, в при обобщении примера для N-портов- (N/2)*10 Мбит/с. В таком случае говорится, что коммутатор предоставляет каждой станции или сегменту, подключенному к его портам, выделенную пропускную способность протокола.</p>
<p align="center"><img src="img/chapter4/4.14.jpg"/></p>
<p align="center">Рисунок 4.14 – Параллельная передача кадров коммутатором</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Естественно, что в сети не всегда складывается описанная ситуация. Если двум станциям, например станциям, подключенным к портам 3 и 4, одновременно нужно записывать данные на один и тот же сервер, подключенный к порту 8, то коммутатор не сможет выделить каждой станции по 10 Мбит/с, так как порт 8 не в состоянии передавать данные со скоростью 20 Мбит/с. Кадры станций будут ожидать во внутренних очередях входных портов 3 и 4, когда освободится порт 8 для передачи очередного кадра. Очевидно, хорошим решением для такого распределения потоков данных было подключение сервера к более высокоскоростному порту, например Fast Ethernet или Gigabit Ethernet.</p>
</font>
<p align="center">
		<a name="4.4.2"><font class="big"> 4.4.2 Дуплексный режим работы</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Технология коммутации сама по себе не имеет непосредственного отношения к методу доступа к среде, который используется портами коммутатора. При подключении к порту коммутатора сегмента, представляющего собой разделяемую среду, данный порт, как и все остальные узлы такого сегмента, должен поддерживать полудуплексный режим.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Однако когда к каждому порту коммутатора подключен не сегмент, а только один компьютер, причем по двум физически разделенным каналам, как это происходит почти во всех стандартах Ethernet, кроме коаксиальных версий Ethernet, ситуация становится не такой однозначной. Порт может работать как в обычном полудуплексном режиме, так и в дуплексном.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В полудуплексном режиме работы порт коммутатора по-прежнему распознает коллизии. Доменом коллизии в этом случае является участок сети, включающий передатчик коммутатора, приемник коммутатора, передатчик сетевого адаптера компьютера, приемник сетевого адаптера компьютера и две витые пары, соединяющие передатчики с приемниками.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коллизия возникает, когда передатчики порта коммутатора и сетевого адаптера одновременно или почти одновременно начинают передачу своих кадров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В дуплексном режиме одновременная передача данных передатчиком порта коммутатора и сетевого адаптера коллизией не считается. В принципе, это достаточно естественный режим работы для отдельных дуплексных каналов передачи данных, и он всегда использовался в протоколах глобальных сетей. При дуплексной связи порты Ethernet стандарта 10 Мбит/с могут передавать данные со скоростью 20 Мбит/с – по 10 Мбит/с в каждом направлении.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Уже первые коммутаторы Kalpha поддерживали оба режима работы своих портов, позволяя использовать коммутаторы для объединения сегментов разделяемой среды, как делали их предшественники-мосты, и в то же время, позволяя удваивать скорость обмена данными на предназначенных для связи между коммутаторами портах за счет работы этих портов в дуплексном режиме.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Долгое время коммутаторы Ethernet сосуществовали в локальных сетях с концентраторами Ethernet: на концентраторах строились нижние уровни сети здания, такие как сети рабочих групп и отделов, а коммутаторы служили для объединения этих сегментов в общую сеть.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Постепенно коммутаторы стали применяться и на нижних этажах, вытесняя концентраторы, так как цены коммутаторов постоянно снижались, а их производительность росла (за счет поддержки не только технологии Ethernet со скоростью 10 Мбит/с, но и всех последующих более скоростных версий этой технологии, то есть Fast Ethernet со скоростью 100 Мбит/с, Gigabit Ethernet со скоростью 1 Гбит/с и 10 G Ethernet со скоростью 10 Мбит/с). Этот процесс завершился вытеснением концентраторов Ethernet и переходом к полностью коммутируемым сетям. Пример такой сети представлен на рисунке 4.15.</p>
<p align="center"><img src="img/chapter4/4.15.jpg"/></p>
<p align="center">Рисунок 4.15 – Полностью коммутируемая сеть Ethernet</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В полностью коммутируемой сети Ethernet все порты работают в дуплексном режиме, а продвижение кадров осуществляется на основе MAC-адресов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При разработке технологии Fast Ethernet и Gigabit Ethernet дуплексный режим стал одним из двух полноправных стандартных режимов работы узлов сети. Однако уже практика применения первых коммутаторов с портами Gigabit Ethernet показала, что они практически всегда применяются в дуплексном режиме для взаимодействия с другими коммутаторами или высокоскоростными сетевыми адаптерами. Поэтому при разработке стандарта 10 G Ethernet его разработчики не стали создавать версию для работы в полудуплексном режиме, окончательно закрепив уход разделяемой среды из технологии Ethernet.</p>
</font>
<p align="center">
		<a name="4.4.3"><font class="big"> 4.4.3 Неблокирующие коммутаторы</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как уже отмечалось, высокая производительность является одним из главных достоинств коммутаторов. С понятием производительности тесто связано неблокирующего коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутатор называют неблокирующим, если он может передавать кадры через свои порты с той же скоростью, с которой они на них поступают.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Когда говорится, что коммутатор может поддерживать устойчивый неблокирующий режим работы, то имеется в виду, что коммутатор передает кадры со скоростью их поступления в течение произвольного промежутка времени. Для поддержания подобного режима нужного таким образом распределить потоки кадров по выходным портам, чтобы, во-первых, порты справлялись с нагрузкой, во-вторых, коммутатор мог всегда в среднем передавать на выходы столько кадров, сколько их поступило на входы. Если же входной поток кадров (просуммированный по всем портам) в среднем будет превышать выходной поток кадров (также просуммированный по всем портам), то кадры будут накапливаться в буферной памяти коммутатора и при переполнении просто отбрасываться.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для поддержания устойчивого неблокирующего режима работы коммутатора необходимо, чтобы его производительность удовлетворяла условию С<sub>к</sub>=(&sum;С<sub>pi</sub>)/2, где С<sub>к</sub> – производительность коммутатора, С<sub>pi</sub>  – максимальная производительность протокола, поддерживаемого i-ым портом коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В этом отношении под производительностью коммутатора в целом понимается его способность продвигать определенное количество кадров, принимаемых от приемников всех его портов, на передатчики все его портов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В суммарной производительности портов каждый проходящий кадр учитывается дважды, как входящий и как выходящий, а так как в устойчивом режиме входной трафик равен выходному, то минимально достаточная производительность коммутатора для поддержки неблокирующего режима равна половине суммарной производительности портов. Если порт, например, стандарта Ethernet со скоростью 10 Мбит/с работает в полудуплексном режиме, то производительность порта С<sub>pi</sub> равна 10 Мбит/с, а если в дуплексном – 20 Мбит/с.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Иногда говорится, что коммутатор поддерживает мгновенный неблокирующий режим. Это означает, что он может принимать и обрабатывать кадры от всех своих портов на максимально скорости протокола независимо от того, обеспечиваются ли условия устойчивого равновесия между входным и выходным трафиком. Правда, обработка некоторых кадров при этом может быть неполной – при занятости выходного порта кадр помещается в буфер коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для поддержки мгновенного неблокриующего режима коммутатор должен обладать большой собственной производительностью, а именно она должна быть равна суммарной производительности его портов: С<sub>к</sub>=&sum;С<sub>pi</sub>. Приведенные соотношения справедливы для портов с любыми скоростями, то есть портов стандартов Ethernet со скорость 10 Мбит/с, Fast Ehernet, Gigabit Ethernet и 10G Ethernet.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Способы, которыми обеспечивается способность коммутатора поддерживать неблокирующий режим, могут быть разными. Необходимым требованием является умение процессора порта обрабатывать потоки кадров с максимальной для физического уровня этого порта скоростью. Максимальная производительность порта Ethernet стандарта 10 Мбит/с равна 14880 кадров в секунду. Это означает, что процессоры портов Ethernet стандарта 10 Мбит/с неблокриующего коммутатора должны поддерживать продвижение кадров со скоростью 14880 кадров в секунду.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Однако только адекватной производительности процессоров портов недостаточно для того, чтобы коммутатор был неблокирующим. Необходимо, чтобы достаточной производительностью обладали все элементы архитектуры коммутатора, включая центральный процессор, общую память, шины, соединяющие отдельные модули между собой, саму архитектуру коммутатора.</p>
</font>
<p align="center">
		<a name="4.4.4"><font class="big"> 4.4.4 Борьба с перегрузками</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Даже в том случае, когда коммутатор является неблокирующим, нет гарантии того, что он во всех случаях справится с потоком кадров, направляемых на его порты. Неблокирующие коммутаторы тоже могут испытывать перегрузки и терять кадры из-за переполнения внутренних буферов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Причина перегрузок обычно кроется не в том, что коммутатору не хватает производительности для обслуживания  потоков кадров, а в ограниченной пропускной способности отдельного выходного порта, которая определяется параметрами протокола. Другими словами, какой бы производительностью коммутатор не обладал, всегда найдется такое распределение потоков кадров, которое приведет к перегрузке коммутатора из-за ограниченной производительности выходного порта коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Возникновение таких перегрузок является платой за отказ от применения алгоритма доступа к разделяемой среде, так как в дуплексном режиме работы портов теряется контроль за потоками кадров, направляемых конечными узлами в сеть. В полудуплексном режиме свойственным технологиям с разделяемой средой, поток кадров регулировался самим методом доступа к разделяемой среде. При переходе на дуплексный режим узлу разрешается отправлять кадры в коммутатор всегда, когда это ему нужно, поэтому в данном режиме коммутаторы могут сталкиваться с перегрузками, не имея при этом никаких средств "притормаживания" потока кадров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Таким образом,  если входной трафик неравномерно распределяется между выходными портами, легко представить ситуацию, когда на какой-либо выходной порт коммутатора будет направляться трафик с суммарной средней интенсивностью большей, чем протокольный максимум. На рисунке 4.16 показана как раз такая ситуация, когда порт 3 коммутатора Ethernet направляется от портов 1, 2, 4, и 6 поток кадров размером в 64 байт с суммарной интенсивностью в 22100 кадров в секунду. Известно, что максимальная скорость в кадрах в секунду для сегмента Ethernet составляет14880. Естественно, что когда кадры поступают в буфер порта со скоростью 22100 кадров в секунду, а уходят со скоростью 14880 кадров в секунду, то внутренний буфер выходного порта начинает неуклонно заполняться необработанными кадрами.</p>
<p align="center"><img src="img/chapter4/4.16.jpg"/></p>
<p align="center">Рисунок 4.16 – Переполнение буфера порта из-за несбалансированности трафика</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В приведенном примере нетрудно подсчитать, что при размере буфера в 100 Кбайт полное заполнение буфера произойдет через 0,22 секунды после начала работы в таком интенсивном режиме. Увеличение размера буфера до 1 Мбайт даст увеличение времени заполнения буфера до 2,2 секунды, что также неприемлемо. Проблему можно решить с помощью средств контроля перегрузки.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Существуют различные средства контроля перегрузки: управление очередями в коммутаторах, обратная связь, резервирование пропускной способности. На основе этих средств можно создать эффективную систему поддержки показателей QoS для трафика разных классов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Далее рассмотрен механизм обратной связи, который был стандартизирован как спецификация 802.3х. Механизм обратной связи 802.3х  используется только в дуплексном режиме работы портов коммутатора. Этот механизм очень важен для коммутаторов локальных сетей, так как он позволяет сократить потери кадров из-за переполнения буферов независимо от того, обеспечивает сеть дифференцированную поддержку показателей QoS для разных типов трафика или же предоставляет базовый сервис по доставке с максимальными усилиями.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Спецификация 802.3х вводит новый уровень в стеке протоколов Ethernet – подуровень управления уровня MAC. Он располагается на уровнем MAC и является необязательным (рисунок 4.17).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кадры этого подуровня могут использоваться в различных целях, но пока в стандартах Ethernet для них определена только одна задача – приостановка передачи кадров другими узлами на определенное время.</p>
<p align="center"><img src="img/chapter4/4.17.jpg"/></p>
<p align="center">Рисунок 4.17 – Подуровень управления MAC</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кадр подуровня управления отличается от кадров пользовательских данных тем, что в поле типа всегда содержится шестнадцатеричное значение 88-08. Формат кадров подуровня управления рассчитан на универсальное применение, поэтому он достаточно сложен (рисунок 4.18).</p>
<p align="center"><img src="img/chapter4/4.18.jpg"/></p>
<p align="center">Рисунок 4.18 – Формат кадра подуровня управления</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутатор использует кадр подуровня управления в том случае, когда ему нужно новое время приостановить поступление кадров от соседнего узла, чтобы разгрузить свои внутренние очереди.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В качестве адреса назначения можно указывать зарезервированное для этой цели значение группового адреса 01-80-С2-00-01. Это удобно, когда соседний узел также является коммутатором (так как порты коммутатора не имеют уникальных MAC-адресов). Если сосед – конечный узел, можно также использовать уникальный MAC-адрес. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В поле кода операции подуровня управления указывается шестнадцатеричный код 00-01, поскольку пока определена только одна операция подуровня управления - она называется PAUSE (пауза) и имеет шестнадцатеричный код 00-01.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В поле параметров подуровня управления указывается время, на которое узел, получивший такой код, должен прекратить передачу кадров узлу, отправившему кадр с операцией PAUSE. Время измеряется в 512 битовых интервалах конкретной реализации Ethernet, диапазон возможных вариантов приостановки равен 0-65535</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как видно из описания, этот механизм обратной связи относится к типу 2 в соответствии с принятой классификацией. Специфика его состоит в том, что в нем предусмотрена только одна операция -  приостановка на определенное время. Обычно же в механизмах этого типа используются две операции – приостановка и возобновление передачи кадров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Проблема, иллюстрируемая на рисунке 4.15, может быть решена и другим способом: применением, так называемого <em>магистрального</em> или <em>восходящего порта</em>. Магистральные порты в коммутаторах Ethernet – это порты следующего уровня иерархии скорости по сравнению с портами, предназначенными для подключения пользователей. Например, если коммутатор имеет 12 портов Ethernet стандарта 10 Мбит/с, то магистральный порт должен быть портом Fast Ethernet, чтобы его скорость была достаточна для передачи до 10 потоков от входных портов. Обычно низкоскоростные порты коммутатора служат для соединения с пользовательскими компьютерами, а магистральные порты – для подключения либо сервера, к которому обращаются пользователи, либо коммутатора более низкого уровня иерархии.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.19 показан пример коммутатора, имеющего 24 порта стандарта Fast Ethernet со скоростью 100 Мбит/с, к которым подключены пользовательские компьютеры, и один порт стандарта Gigabit Ethernet  со скоростью 1000 Мбит/с, к которому подключен сервер. При такой конфигурации коммутатора вероятность перегрузки портов существенно снижается по сравнению с вариантом, когда все порты поддерживают одинаковую скорость. Хотя возможность перегрузки по-прежнему существует, для этого необходимо, чтобы более чем 10 пользователей одновременно обменивались с сервером данными со средней скоростью, близкой к максимальной скорости их соединений – а такое событие достаточно маловероятно.</p>
<p align="center"><img src="img/chapter4/4.19.jpg"/></p>
<p align="center">Рисунок 4.19 – Коммутатор рабочей группы</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Из приведенного примера видно, что вероятность перегрузки портов коммутаторов зависит от распределения трафика между его портами, кроме того, понятно, что даже при хорошем соответствии скорости портов наиболее вероятному распределению трафика полностью исключить перегрузки невозможно.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Поэтому в общем случае для уменьшения потерь кадров из-за перегрузок нужно применять оба средства: подбор скорости портов для наиболее вероятного распределения трафика в сети и протокол 802.3х для снижения скорости источника трафика в тех случаях, когда перегрузки все-таки возникают.</p>
</font>
<p align="center">
		<a name="4.4.5"><font class="big"> 4.4.5 Характеристики производительности коммутаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Скорости фильтрации и продвижения кадров – две основные характеристики производительности коммутатора. Эти характеристики являются интегральными. Он не зависят от того, каким образом технически реализован коммутатор.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Скорость фильтрации  - это скорость, с которой коммутатор выполняет следующие этапы обработки кадров:
<ol>
<li>Прием кадра в свой буфер.</li>
<li>Просмотр адресной таблицы с целью нахождения порта для адреса назначения кадра.</li>
<li>Уничтожение кадра, так как его порт назначения и порт источника принадлежит одному логическому сегменту.</li>
</ol></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Скорость фильтрации практически у всех коммутаторов блокирующим фактором не является – коммутатор успевает отбрасывать кадры в темпе их поступления.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Скорость  продвижения – это скорость, с которой коммутатор выполняет следующие этапы обработки кадров:
<ol>
<li>Прием кадра в свой буфер.</li>
<li>Просмотр адресной таблицы с целью нахождения порта для адреса назначения кадра.</li>
<li>Передача кадра в сеть через найденный по адресной таблице порт назначения.</li>
</ol></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как скорость фильтрации, так и скорость продвижения измеряются обычно в кадрах в секунду. Если в характеристиках коммутатора не уточняется, для каждого протокола и для какого размера кадра приведены значения скоростей фильтрации и продвижения, то по умолчанию считается, что эти показатели даются для протокола Ethernet и кадров минимального размера, то есть кадров длиной 64 байт. Известно, что режим передачи кадров минимальной длины используется как наиболее сложный тест, который должен подтвердить способность коммутатора работать при наихудшем сочетании параметров трафика.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Задержка передачи кадра измеряется как время, прошедшее с момента прихода первого байта на входной порт коммутатора до момента появления этого байта на его выходном порту. Задержка складывается из времени, затрачиваемого на буферизацию байтов кадра, и времени, затрачиваемого на обработку кадра коммутатором – просмотр адресной таблицы, принятие решения о фильтрации или продвижении, получение доступа к среде выходного порта. Величина вносимой коммутатором задержки зависит от режима его работы. Если коммутация осуществляется "на лету", то задержки обычно невелики и составляют от 5 до 40 мкс, а при полной буферизации кадров – от 50 до 200 мкс для кадров минимальной длины при передаче со скоростью 10 Мбит/с. Коммутаторы, поддерживающие более скоростные версии Ethernet, вносят меньшие задержки в процесс продвижения кадров.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Производительность коммутатора определяется количеством пользовательских данных, переданных в единицу времени через его порты, и измеряется в мегабитах в секунду (Мбит/с). Так как коммутатор работает на канальном уровне, для него пользовательскими данными являются те данные, которые переносятся в поле данных кадров Ethernet. Максимальное значение производительности коммутатора всегда достигается на кадрах максимальной длины, так как при этом доля накладных расходов на служебную информацию кадра минимальна. Коммутатор – многопортовое устройство, поэтому для него в качестве характеристики принято давать максимальную суммарную производительность при одновременной передаче трафика по всем его портам.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Еще одной важной конструктивной характеристикой коммутатора является максимальная емкость адресной таблицы. Она определяет предельное количество MAC-адресов, которыми может одновременно оперировать коммутатор.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для выполнения операций каждого порта в коммутаторах чаще всего используется выделенный процессорный блок со своей памятью для хранения собственного экземпляра адресной таблицы. Каждый порт хранит только те наборы адресов, с которыми он работал в последнее время, поэтому экземпляры адресной таблицы разных процессорных модулей, как правило, не совпадают.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Значение максимального числа MAC-адресов, которое может запомнить процессор порта, зависит от области применения коммутатора. Коммутаторы рабочих групп обычно поддерживают всего несколько адресов на порт, так как они предназначены для образования микросегментов. Коммутаторы отделов должны поддерживать несколько сотен адресов, а коммутаторы магистральных сетей – до нескольких тысяч (4000-8000 адресов).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Недостаточная емкость адресной таблицы может служить причиной замедления работы коммутатора и засорения сети избыточным трафиком. Если адресная таблица процессора порта полностью заполнена, а он встречает новый адрес источника в поступившем кадре, процессор должен удалить из таблицы какой-либо старый адрес и поместить его на место новый. Эта операция сама по себе отнимает у процессора часть времени, но главные потери производительности наблюдаются при поступлении кадра с адресом назначения, который пришлось удалить из адресной таблицы. Так как адрес назначения кадра неизвестен, коммутатору приходится передавать этот кадр на все остальные порты. Некоторые производители коммутаторов решают эту проблему за счет изменения алгоритма обработки кадров с неизвестным адресом назначения. Один из портов коммутатора конфигурируется как магистральный порт, на который по умолчанию передаются все кадры с неизвестным адресом. Передача кадра на магистральный порт производится в расчете на то, что этот порт подключен к вышестоящему коммутатору (при иерархическом соединении коммутаторов в крупной сети), который имеет достаточную емкость адресной таблицы и "знает", куда можно передать любой кадр.</p>
</font>
<p align="center">
		<a name="4.4.6"><font class="big"> 4.4.6 Архитектура коммутаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для ускорения операций коммутаций во всех коммутаторах используются заказные специализированные БИС-ASIC, которые оптимизированы для выполнения основных операций коммутации. Часто в одном коммутаторе имеется несколько специализированных БИС, каждая из которых выполняет функционально законченную часть операций.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Важную роль в построении коммутаторов играют также программируемые микросхемы FPGA (Field-Programmable Gate Array – программируемы в условиях эксплуатации массив вентилей). Эти микросхемы могут выполнять все функции, которые выполняют микросхемы ASIC, но в отличие от последних эти функции могут программироваться и перепрограммироваться производителями коммутаторов. Это свойство позволило резко удешевить процессоры портов коммутаторов, выполняющих сложные операции, например, профилирование трафика, так как производитель FPGA выпускает свои микросхемы массово, а не по заказу того или иного производителя оборудования. Кроме того, применение микросхем FPGA позволяет производителям коммутаторов оперативно вносить изменения в логику работы порта при появлении новых стандартов или изменения действующих.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Помимо процессорных микросхем для успешной неблокирующей работы коммутатору нужно иметь быстродействующий узел обмена, предназначенный для передачи кадров между процессорными микросхемами портов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В настоящее время в коммутаторах узел обмена строится на основе одной или трех схем:
<ul>
<li>коммутационная матрица;</li>
<li>общая шина;</li>
<li>разделяемая многовходовая память.</li>
</ul></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Часто эти схемы комбинируются в одном коммутаторе.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутационная матрица обеспечивает наиболее простой способ взаимодействия процессоров портов, и именно этот способ был реализован в первом промышленном коммутаторе локальных сетей. Однако реализация матрицы возможна только для определенного числа портов, причем сложность схемы возрастает пропорционально квадрату количеств апортов коммутатора (рисунок 4.20).</p>
<p align="center"><img src="img/chapter4/4.20.jpg"/></p>
<p align="center">Рисунок 4.20 – Коммутационная матрица</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Более детальное представление одного из возможных вариантов реализации коммутационной матрицы для восьми портов дано на рисунке 4.21. Входные блоки процессоров портов на основании просмотра адресной таблицы коммутатора определяют по адресу назначения номер выходного порта. Эту информацию они добавляют к байтам исходного кадра в виде специального ярлыка – тега. Для данного примера тег представляет собой просто 3-разрядное двоичное число, соответствующее номеру выходного порта.</p>
<p align="center"><img src="img/chapter4/4.21.jpg"/></p>
<p align="center">Рисунок 4.21 – Реализация коммутационной матрицы 8*8 с помощью двоичных переключателей</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Матрица состоит из трех уровней двоичных переключателей, которые соединяют свой вход с одним из двух выходов в зависимости от значения бита порта. Переключатели первого уровня управляются первым битом тега, второго – вторым, а третьего – третьим.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Матрица может быть реализована и иначе, на основании комбинационных схем другого типа, но ее особенностью все равно остается технология коммутации физических каналов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Известным недостатком этой технологии является отсутствие буферизации данных внутри коммутационной матрицы – если составной канал невозможно построить из-за занятости выходного порта или промежуточного коммутационного элемента, то данные должны накапливаться в их источнике,  в данном случае – во входном блоке порта, принявшего кадр. Основные достоинства таких матриц – высокая скорость коммутации и регулярная структура, которую удобно реализовывать в интегральных микросхемах. Зато после реализации матрицы N*M в составе БИС проявляется еще один ее недостаток – сложность наращивания числа коммутируемых узлов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В коммутаторах с общей шиной процессоры портов связывают высокоскоростной шиной, используемой в режиме разделения времени.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Пример такой архитектуры приведен на рисунке 4.22. Чтобы шина не блокировала работу коммутатора, ее производительность должна равняться, по крайней мере, сумме производительностей всех портов коммутатора. Для модульных коммутаторов характерно то, что путем удачного подбора модулей с низкоскоростными портами можно обеспечить неблокирующий режим работы, но в тоже время некоторые сочетания модулей с высокоскоростными портами могут приводить у структурам, у которых узким местом является общая шина.</p>
<p align="center"><img src="img/chapter4/4.22.jpg"/></p>
<p align="center">Рисунок 4.22 – Архитектура коммутатора с общей шиной</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кадр должен передаваться по шине небольшими частями, по несколько байтов, чтобы передача кадров между портами происходила в псевдопараллельном режиме, не внося задержек в передачу кадра в целом. Размер такой ячейки данных определяется производителем коммутатора. Некоторые производители выбирают в качестве порции данных, переносимых по шине за одну операцию, ячейку ATM с ее полем данных в 48 байт. Такой подход облегчает трансляцию протоколов локальных сетей в протокол ATM, если коммутатор поддерживает эти технологии. Кроме того, небольшой размер ячейки (ее формат может быть и фирменным, так как перенос данных между портами является сугубо внутренней операцией) уменьшает задержки доступа порта к общей шине.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Входной порт процессора помещает в ячейку, переносимую по шине, тег, в котором указывает номер порта назначения. Каждый выходной блок процессора порта содержит фильтр тегов, который выбирает теги, предназначенные данному порту.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Шина, также как и коммутационная матрица, не может осуществлять промежуточную буферизацию, но поскольку данные кадра разбиваются на небольшие ячейки, задержек с начальным ожиданием доступность выходного порта в такой схеме нет – здесь работает принцип коммутации пакетов, а не каналов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Разделяемая многовходовая память представляет собой третью базовую архитектуру взаимодействия портов. Пример такой архитектуры приведен на рисунке 4.23.</p>
<p align="center"><img src="img/chapter4/4.23.jpg"/></p>
<p align="center">Рисунок 4.23 – Архитектура коммутаторов с разделяемой памятью</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Входные блоки процессоров портов соединяются с переключаемым входом разделяемой памяти, а выходные блоки этих же процессоров – с ее переключаемым выходом. Переключением входа и выхода разделяемой памяти управляет менеджер очередей выходных портов. В разделяемой памяти менеджер организует несколько очередей данных, по одной для каждого выходного порта. Входные блоки процессоров передают менеджеру портов запросы на запись данных в очередь того порта, который соответствует адресу назначения кадра. Менеджер по очереди подключает вход памяти к одному из входных блоков процессоров и тот переписывает часть данных кадра в очередь определенного выходного порта. По мере заполнения очередей менеджер производит также поочередное подключение выхода разделяемой памяти к выходным блокам процессоров портов, и данные из очереди переписываются в выводной буфер процессора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Применение общей буферное памяти, гибко распределяемой менеджером между отдельными портами, снижает требования к размеру буферной памяти процессора порта. Однако буферная память должна быть достаточно быстродействующей для поддержания необходимой скорости обмена данными между N портами коммутатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Комбинированные коммутаторы. У каждой из описанных архитектур есть свои достоинства и недостатки, поэтому часто применяются в комбинации друг с другом. Пример такого комбинирования приведен на рисунке 4.24. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутатор состоит из модулей с фиксированным количеством портов (2-12), выполненных на основе специализированной БИС, реализующей архитектуру коммутационной матрицы. Если порты, между которыми нужно передать кадр данных, принадлежит одному модулю, то передача кадра осуществляется процессорами модуля на основе, имеющейся в модуле, коммутационной матрицы. Если же порты принадлежат разным модулям, то процессоры общаются по общей шине. В такой архитектуре передача кадров внутри модуля будет происходить быстрее, чем при межмодульной передаче, так как коммутационная матрица – это наиболее быстрое, хотя и наименее масштабируемое средство взаимодействия портов. Скорость внутренней шины коммутаторов может достигать нескольких гигабит в секунду, а у наиболее мощных моделей – до нескольких десятков гигабит в секунду.</p>
<p align="center"><img src="img/chapter4/4.24.jpg"/></p>
<p align="center">Рисунок 4.24 – Комбинирование архитектур коммутационной матрицы и общей шины</p>
</font>
<p align="center">
		<a name="4.4.7"><font class="big"> 4.4.7 Типы коммутаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На конструктивное исполнение коммутаторов большое влияние оказывает их область применения. Настольные коммутаторы и коммутаторы рабочих групп чаще всего выпускаются как устройства с фиксированным количеством портов, корпоративные коммутаторы – как модульные устройства на основе шасси, а коммутаторы отделов могут иметь стековую конструкцию. Такое деление не является жестким, и в качестве корпоративного коммутатора может использоваться, например, стековый коммутатор.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Коммутатор с фиксированным количеством портов</strong> – это наиболее простое конструктивное исполнение, когда устройство представляет собой отдельный корпус со всеми необходимыми элементами (портами, органами индикации и управления, блоком питания), и эти элементы заменять нельзя.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Настольные коммутаторы</strong> представляют собой наиболее простой тип устройств с фиксированным количеством портов. Обычно все порты такого коммутатора поддерживают одну среду передачи, общее количество портов изменяется от 4 до 48. Порты такого коммутатора являются чаще всего интерфейсами 10/100 или 10/100/1000 Мбит/с на витой паре, поддерживающими автопереговоры.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Коммутатор  рабочей группы с фиксированным количеством портов</strong> имеет, как правило, множество портов для подключения пользовательских компьютеров – как и у настольного коммутатора, эти порты обычно являются интерфейсами 10/100 или 10/100/1000 Мбит/с на витой паре, поддерживающими автопереговоры. Кроме того, такой коммутатор имеет несколько магистральных портов для соединения с коммутаторами верхних уровней. Коммутатор может иметь порты, выполненные в особом конструктивном исполнении как слоты для установки модулей портов стандарта SPF.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Дело в том, что, начиная со стандарта Gigabit Ethernet, порты для работы на оптическом волокне начали выпускаться в виде отдельных модулей, устанавливаемых в специальные слоты коммутационных устройств. Такая конструкция позволяет легко переходить от одного типа оптического волокна к другому, например от многомодового к одномодовому, путем замены модуля порта. Существует два популярных стандарта на конструктивное исполнение модулей портов Gigabit Ethernet и их интерфейс с самим устройством: GBIC и SPF.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Оба эти стандарта приняты комитеты SFF (Small Form Factor committee – Комитет производителей компактного оборудования), который был образован в 1990 году как консорциум производителей периферийного оборудования для компьютеров, а затем расширил свои функции. Стандарты SFF являются результатом взаимной договоренности между производителями оборудования. Модули GBIC (Gigabit Ethernet Interface Converter – конвертор интерфейса Gigabit Ethernet) появились раньше, они обладают большими размерами, чем модули SFP (Small Factor Pluggable module – устанавливаемый модуль небольшого размера), которые были стандартизированы позднее. Модули SFP называют также моделями мини-GBIC. Несмотря на то, что изначально и модули GBIC, и модули SFP были задуманы как смена часть портов Gigabit Ethernet для оптического волокна, выпускается и для витой пары, так как это делает слоты SFP коммутаторов (и маршрутизаторов) универсальными.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В том случае, если коммутатор рабочей группы поддерживает интерфейсы 10G Ethernet, они также выполняются как слоты с устанавливаемыми модулями. Существует несколько стандартов таких модулей: XENPAK, XSP и SFP+. Все стандарты представляют собой результат взаимной договоренности между производителями оборудования.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Модульный коммутатор</strong> выполняется в виде отдельных модулей с фиксированным количеством портов, эти модули устанавливаются на общее шасси. Шасси имеет внутреннюю шину для объединения отдельных модулей отдельных модулей в единое устройство. Для модульного коммутатора могут существовать различные типы модулей, отличающиеся количеством портов и типом поддерживаемой физической среды. Модульные коммутаторы позволяют более позволяют более точно подобрать необходимую для конкретного применения конфигурацию коммутатора, а также гибко и с минимальными затратами реагировать на изменения конфигурации сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ввиду ответственной работы, которую выполняют модульные коммутаторы, они снабжаются модулем управления, системой терморегулирования, избыточными источниками питания и возможностью замены модулей "на лету".</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Недостатком коммутатора на основе шасси является высокая начальная стоимость такого устройства для случая, когда предприятию на первом этапе создания сети нужно установить всего 1-2 модуля. Высокая стоимость шасси вызвана тем, что оно поставляется вместе со всеми общими устройствами, такими как избыточнее источники питания и.т.п.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Стековый коммутатор, как и коммутатор с фиксированным числом портов выполнен в виде отдельного корпуса без возможности замены отдельных его модулей. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Стековые коммутаторы имеют специальные порты и кабели для объединения нескольких корпусов в единый коммутатор с общим блоком управления. Стековые коммутаторы могут поддерживать различные физические среды передачи, что делает их почти такими же гибкими, как модульные концентраторы, но при этом стоимость этих устройств в расчете на один порт получается обычно ниже, так как сначала предприятие может купить одного устройство без избыточного шасси, а потом нарастить стек еще несколькими аналогичными устройствами.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Приведенная классификация конструктивного исполнения справедлива не только для коммутаторов, но и для коммуникационных устройств всех типов – маршрутизаторов, коммутаторов, глобальных сетей, мультиплексоров.</p>
<!-- *****something expected -->
</font>
<p align="center">
		<a name="4.4.8"><font class="big"> 4.4.8 Интеллектуальные функции коммутаторов. Виртуальные локальные сети</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Техника виртуальных локальных сетей (VLAN) позволяет разбивать коммутируемую локальную сеть на несколько обособленных логических сегментов, предотвращающих распространение нежелательного трафика по всей сети, кроме того, это свойство улучшает управляемость сети. Обособленные сегменты   виртуальных локальных сетей затем могут быть соединены в составную сеть уже с помощью маршрутизаторов, при этом благодаря программному делению сети на сегменты очень удобно быстро менять структуру сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Важным свойством коммутатора локальной сети является способность контролировать  передачу кадров между сегментами сети. По различным причинам (соблюдение прав доступа, политика безопасности  ит. д.) некоторые кадры не следует передавать по адресу назначения.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ограничения такого типа можно реализовать с помощью пользовательских фильтров. Однако пользовательский фильтр может запросить коммутатору передачу кадров только по конкретным адресам, а широковещательный трафик он обязан передать всем сегментам сети. Так требует алгоритм его работы. Поэтому, из-за отсутствия барьеров на пути широковещательного трафика.  Технология виртуальных локальных сетей позволяет преодолеть указанное ограничение.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Виртуальной локальной сетью (VLAN) называется группа узлов сети, трафик которой, в том числе широковещательный, на канальном уровне полностью изолирован от трафика других узлов сети (рисунок 4.25).</p>
<p align="center"><img src="img/chapter4/4.25.jpg"/></p>
<p align="center">Рисунок  4.25 – Виртуальные локальные сети</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Это означает что, передача кадров между разными виртуальными сетями на основании адреса канального уровня невозможно независимо от типа адреса (уникального, группового или широковещательного). В то же время внутри виртуальной сети кадры передаются по технологии коммутации, то есть только на тот порт, который связан с адресом назначения кадра.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Виртуальные локальные сети могут перекрываться, если один или несколько компьютеров входят в состав более чем одной виртуальной сети. На рисунке 14.10 сервер электронной почты входит в состав виртуальных сетей 3 и 4. Это означает, что его кадры  передаются коммутаторами всем компьютерам, входящим в эти сети. Если же какой-то компьютер входит в состав только виртуальной сети 3, то его кадры до сети 4 доходить не будут, но он может взаимодействовать с компьютерами сети 4 через общий почтовый сервер. Такая схема  защищает виртуальные сети друг от друга полностью, например, широковещательный шторм, возникший  на сервере электронной почты, затопит и сеть 3, и сеть и 4. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Виртуальная сеть, образует домен широковещательного трафика по аналогии с доменом коллизий, который образуется повторителями сетей  Ethernet.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Говорят, что виртуальная сеть образует домен широковещательного трафика по аналогии с доменом коллизий, который образуется повторителями сети Ethernet.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;С помощью пользовательских фильтров можно вмешиваться в нормальную работу коммутаторов и ограничивать взаимодействие узлов локальной сети в соответствии с требуемыми правилами доступа. Однако механизм пользовательских фильтров коммутаторов имеет несколько недостатков:
<ul>
<li>Приходится  задавать отдельные условия для каждого узла сети, используя при этом громоздкие  MAC-адреса. Гораздо проще было бы группировать узлы и описывать условия взаимодействия сразу для групп.</li>
<li>Невозможно блокировать широковещательный трафик.  Широковещательный трафик может быть причиной недоступности сети, если какой-то ее узел умышленно или неумышленно с большой интенсивностью генерирует широковещательные кадры.</li>
</ul></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Техника виртуальных локальных сетей решает задачу ограничения взаимодействия узлов сети другим способом</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Основное назначение технологии VLAN состоит в облегчении процесса создания  изолированных сетей, которые затем обычно связываются между собой с помощью  маршрутизаторов. Такое построение сети создает мощные барьеры на пути нежелательного трафика из одной сети в другую. Сегодня считается очевидным, что любая крупная сеть должна включать маршрутизаторы, иначе потоки ошибочных кадров, например широковещательных, будут периодически "затапливать" всю сеть через прозрачные для них коммутаторы, приводя ее в неработоспособное состояние.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;До появления технологии VLAN для создания отдельной сети использовались либо  физически изолированные сегменты коаксиального кабеля, либо не связанные между собой сегменты, построенные  на повторителях и мостах. Затем эти сети связывались маршрутизаторами  единую составную сеть (рисунок 4.26).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Изменение состава сегментов (переход пользователя в другую сеть, дробление крупных сегментов) при таком подходе подразумевает физическую перекоммутацию разъемов на передних панелях повторителей или на кроссовых панелях, что не очень удобно в больших сетях – много физической работы, к тому же высока вероятность ошибки.</p>
<p align="center"><img src="img/chapter4/4.26.jpg"/></p>
<p align="center">Рисунок 4.26 – Составная сеть, состоящая из сетей, построенных  на основе повторителей</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для связывания  виртуальных сетей в общую сеть требуется привлечение средств сетевого уровня. Он может быть реализован в отдельном маршрутизаторе или в составе программного обеспечения коммутатора, который тогда становится комбинированным устройством – так называемым коммутатором 3-го уровня.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Технология виртуальных сетей долгое время не стандартизировалась, хотя и была реализована  в очень широком спектре моделей коммутаторов разных производителей. Положение изменилось после принятия в 1998 году стандарта IEEE802.1Q, который определяет базовые правила построения виртуальных локальных сетей, не зависящие от протокола канального уровня, поддерживаемого коммутатором.</p>
</font>
<p align="center">
		<a name="4.4.8.1"><font class="big"> 4.4.8.1 Создание виртуальных сетей на базе одного коммутатора</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При создании виртуальных сетей на основе одного коммутатора обычно используется механизм группирования портов коммутатора (рисунок 4.27). При этом каждый порт приписывается той или иной виртуальной сети. Кадр, пришедший от порта, принадлежащего, например, виртуальной сети 1, никогда не будет передан порту, который не принадлежит этой виртуальной сети. Порт можно приписать нескольким виртуальным сетям, хотя на практике так делают редко – пропадает эффект полной изоляции сетей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Создание виртуальных сетей путем группирования портов не требует от администратора большого объема ручной работы – достаточно каждый порт приписать  к одной из нескольких заранее поименованных  виртуальных сетей. Обычно  такая операция выполняется с помощью специальной программы, прилагаемой к коммутатору.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Второй способ образования виртуальных сетей основан на группировании MAC-адресов. Каждый MAC-адрес, который изучен коммутаторами, приписывается той или иной виртуальной сети. При существовании в сети множества узлов этот способ требует от администратора большого объема ручной работы. Однако при построении виртуальных сетей на основе нескольких коммутаторов он оказывается более гибким, чем группирование портов.</p>
<p align="center"><img src="img/chapter4/4.27.jpg"/></p>
<p align="center">Рисунок 4.27 – Виртуальные сети, построение на одном коммутаторе</p>
</font>
<p align="center">
		<a name="4.4.8.2"><font class="big"> 4.4.8.2 Создание виртуальных сетей на базе нескольких коммутаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Рисунок 4.28 иллюстрирует проблему, возникающую при создании  виртуальных сетей на основе нескольких коммутаторов, поддерживающих технику группирования портов.</p>
<p align="center"><img src="img/chapter4/4.28.jpg"/></p>
<p align="center">Рисунок 4.28 – Построение виртуальных сетей на нескольких коммутаторах с группированием портов</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Если узлы какой-либо виртуальной сети подключены к разным коммутаторам, то для подключения каждой такой сети на коммутаторах должна быть выделена  специальная пара портов. В противном случае, если коммутаторы будут связаны только одной парой портов, информация о принадлежности кадра той или иной виртуальной сети при передаче из коммутатора в коммутатор будет утеряна. Таким образом, коммутаторы с группированием портов требуют для своего соединения столько портов, сколько виртуальных сетей они поддерживают. Порты и кабели используются  в этом случае очень расточительно. Кроме того, при соединении виртуальных сетей через маршрутизатор для каждой виртуальной сети выделяется отдельный кабель и отдельный порт маршрутизатора, что также приводит к большим накладным расходам.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Группирование MAC-адресов в виртуальную сеть на каждом коммутаторе избавляет от необходимости связывать их по нескольким портам, поскольку в  этом случае MAC-адрес становится меткой виртуальной сети. Однако этот способ требует выполнения большого количества ручных операций по маркировке MAC-адресов на каждом коммутаторе сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Описанные два подхода основаны только на добавлении дополнительной информации к адресным таблицам коммутатора и в них отсутствует возможность встраивания в передаваемый кадр информации о принадлежности кадра виртуальной сети. В остальных походах используются имеющиеся или дополнительные поля кадра для сохранения информации о принадлежности кадра той или иной виртуальной локальной сети при его перемещениях между коммутаторами сети. При этом нет необходимости помнить в каждом коммутаторе о принадлежности всех MAC-адресов составной сети виртуальным сетям.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Дополнительное поле с пометкой о номере виртуальной сети используется только тогда, когда кадр передается от коммутатора к коммутатору, а при передаче кадра конечному узлу оно обычно удаляется. При этом модифицируется протокол взаимодействия "коммутатор-коммутатор", а программное и аппаратное обеспечение конечных узлов остается неизменным. До принятия стандарта IEEE 802.1Q существовало много фирменных протоколов этого типа, но все они имели один недостаток – оборудование различных производителей при образовании VLAN оказывалось несовместимым.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Этот стандарт вводит в кадр Ethernet дополнительный заголовок, который называется тегом виртуальной локальной сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Тег виртуальной локальной сети из поля TCI (Tag Control Information – управляющая информация тега) размером в два байта и предшествующего ему поля Ethernet, которое является стандартом для кадров Ethernet и также состоит из двух байтов (рисунок 4.29).</p>
<p align="center"><img src="img/chapter4/4.29.jpg"/></p>
<p align="center">Рисунок 4.29 – Структура помеченного кадра Ethernet</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Тег VLAN не является обязательным для кадров Ethernet. Кадр, у которого имеется такой заголовок, называют помеченным (tagged frame).  Коммутаторы могут одновременно работать как с помеченными, так и с непомеченными кадрами. Из-за добавления тега  VLAN максимальная длина поля данных уменьшилась на 4 байта.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для того чтобы оборудование локальных сетей могло отличать и понимать помеченные кадры, для них введено специальное значение поля Ether Type, равное 0х8100. Это значение говорит о том, что за ним следует поле TCI, а не стандартное поле данных. В помещенном кадре за полями тега VLAN следует другое поле Ether Type, указывающее тип протокола, данные которого переносятся полем данных кадра.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В поле TCI находится 12-битное поле номера (идентификатора) VLAN, называемого VID.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Разрядность поля VID позволяет коммутаторам создавать до 4096 виртуальных сетей. Помимо этого в поле TCI помещено 3-битное поле приоритета кадра. Однобитное поле CFI было введено с целью поддержания специального формата кадра Token Ring,  для сетей Ethernet оно должно содержать значение 0.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Пользуясь значением , VID в помеченных кадрах, коммутаторы сети выполняют групповую  фильтрацию трафика, разбивая сеть на виртуальные сегменты, то есть на VLAN. Для поддержки этого режима каждый порт коммутатора приписывается к одной или нескольким виртуальным локальным сетям, то есть выполняется группировка портов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для упрощения конфигурирования сети в стандарте 802.1Q вводятся понятия линии доступа и транка.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Линия доступа связывает порт коммутатора (называемый в этом случае портом доступа) с компьютером, принадлежащим некоторой виртуальной локальной сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Транк – это линия связи, которая соединяет между собой порты двух коммутаторов; в общем случае через транк  передается трафик нескольких виртуальных сетей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы, поддерживающие технику VLAN, без  специального конфигурирования по умолчанию работают как стандартные коммутаторы, обеспечивая соединение всех со всеми. В сети, образованной такими коммутаторами, все конечные узлы по умолчанию относятся к условной сети VLAN1 с идентификатором VID, равным 1. Все порты этой сети, к которым подключены конечные узлы, по определению являются портами доступа.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VLAN1 можно отнести к виртуальным локальным сетям лишь условно, так как по ней передаются непомеченные кадры.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для того чтобы образовать в исходной сети виртуальную локальную сеть, нужно в первую очередь выбрать для нее значение идентификатора VID, отличное от 1, а затем, используя команды конфигурирования коммутатора, приписать к этой сети те порты, к которым присоединены включаемые в нее компьютеры. Порт доступа может быть приписан только к одной виртуальной локальной сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Порты доступа получают от конечных узлов сети непомеченные  кадры и помечают их тегом VLAN, содержащим то значение VID, которое назначено этому порту. При передаче же помеченных кадров конечному узлу порт доступа удаляет тег виртуальной локальной сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На рисунке 4.30 показано, как решается задача избирательного доступа к серверам на основе техники VLAN.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Будем считать, что поставлена задача обеспечить доступ компьютеров С1 и С3 к серверам S1 и S3, в то время как компьютеры С2 и С4 должны иметь доступ к серверам S2 и S4.</p>
<p align="center"><img src="img/chapter4/4.30.jpg"/></p>
<p align="center">Рисунок  4.30 – Разбиение сети на две виртуальные локальные сети</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Чтобы решить эту задачу, можно организовать в сети две виртуальные локальные сети, VLAN2 и VLAN3 (сеть VLAN1 уже существует по умолчанию – это исходная сеть), приписав один набор компьютеров и серверов к VLAN2, а другой – к VLAN3.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для приписывания конечных узлов к определенной виртуальной локальной сети соответствующие порты объявляются портами доступа этой сети путем назначения им соответствующего идентификатора VID. Например, порт 1коммутатора SW1 должен быть объявлен портом доступа VLAN2 путем назначения ему идентификатора VID2, то же самое должно быть проделано с портом 5 коммутатора SW1, с портом 1 коммутатора SW2 портом 1 коммутатора SW3. Порты доступа сети VLAN3 должны получить идентификатор VID3.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В сети нужно также организовать транки – те линии связи, которые соединяют между собой порты коммутаторов. Порты, подключенные к транкам, не добавляют и не удаляют теги, они просто передают кадры в неизменном виде. Такими портами должны быть порты 6 коммутаторов SW1 и SW2, а также порты 3 и 4 коммутатора SW3. Порты должны поддерживать сети VLAN2 и VLAN3 (и VLAN1, если в сети есть узлы, явно не приписанные ни к одной виртуальной локальной сети).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы, поддерживающие технологию VLAN, осуществляют дополнительную фильтрацию трафика. В том случае если таблица продвижения коммутатора говорит о том, что пришедший кадр нужно передать на некоторый порт, перед передачей коммутатор проверяет, соответствует ли значение VID в теге VLAN кадра той виртуальной локальной сети, которая приписана к этому порту. В случае соответствия кадр передается, несоответствия – отбрасывается. Непомеченные  кадры обрабатываются аналогичным образом, но с использованием условной сети VLAN1. MAC-адреса изучаются коммутаторами сети отдельно по каждой виртуальной локальной сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как видно из примера, техника VLAN оказывается весьма эффективной для разграничения  доступа к серверам. Конфигурирование виртуальной локальной сети не требует значения MAC-адресов узлов, кроме того, любое изменение в сети, например подключение компьютера к другому коммутатору, требует конфигурирования лишь порта данного коммутатора, а все остальные коммутаторы сети продолжают работать без внесения изменений в их конфигурации.</p>
</font>
<p align="center">
		<a name="4.4.8.3"><font class="big"> 4.4.8.3 Альтернативные маршруты в виртуальных локальных сетях</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;По умолчанию протокол STP/RSTP образует в сети одно покрывающее дерево для всех виртуальных локальных сетей. Чтобы в сети можно было использовать разные покрывающие деревья для разных виртуальных локальных сетей, существует специальная версия протокола, называемая множественным протоколом покрывающего дерева (Multiple Spanning Tree Protocol, MSPT).</p>
<p align="center"><img src="img/chapter4/4.31.jpg"/></p>
<p align="center">Рисунок 4.31 – Два покрывающих дерева, построенные по протоколу MSPT</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Протокол MSPT позволяет создать несколько покрывающих деревьев, и приписывают к ним различные виртуальные локальные сети. Обычно создается небольшое количество деревьев, например, два или три, чтобы сбалансировать нагрузку на коммутаторы в противном случае, как видно в примере на рисунке 4.27 и 4.28, единственное покрывающее дерево может полностью оставить его без работы некоторые коммутаторы сети, то есть недоиспользует имеющие сетевые ресурсы.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Если вернуться, к примеру  (рисунок 4.27), то при создании двух покрывающих деревьев  можно сконфигурировать приоритеты коммутаторов так, чтобы для одного дерева корневым коммутатором стал коммутатор 111, а для второго – коммутатор 222 (рисунок 4.31).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В этом варианте порты 4 коммутаторов 555 по 888 сконфигурированы как порты доступа одной виртуальной локальной сети, например VLAN200. Сеть VLAN100 приписана к покрывающему дереву с корневым коммутатором 111, а VLAN200 - к покрывающему дереву с корневым коммутатором 222. В этом варианте все коммутаторы сети используются  для передачи трафика, что повышает производительность сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Протокол MSPT основан на протоколе RSTP, поэтому обеспечивает быструю реакцию сети на отказы.</p>
</font>
<p align="center">
		<a name="4.4.8.4"><font class="big"> 4.4.8.4 Качество обслуживания в виртуальных сетях</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы локальных сетей поддерживают практически все механизмы QoS. Это  утверждение относится  к коммутаторам локальных сетей как к классу коммуникационных устройств, каждая же конкретная модель коммутатора может быть наделена только определенным набором механизмов поддержания параметров QoS или же не иметь их вовсе. Как правило, коммутаторы рабочих групп средств QoS не поддерживают, в то время как для магистральных коммутаторов эта поддержка является обязательной.</p>
<ol>
<li>Классификация трафика. Коммутаторы локальных сетей являются устройствами второго уровня, которые анализируют заголовки только протоколов канального уровня. Поэтому коммутаторы обычно используют  для классификации трафика только MAC-адреса источника и приемника, а также  номер порта, через который поступил в кадр. Возможен также учет при классификации значения произвольного подполя внутри поля данных, заданного путем указания смещения в байтах. Эти способы не очень удобны для администратора, которому необходимо, например, отделить голосовой трафик от трафика передачи файлов. Поэтому некоторые коммутаторы, не поддерживая протоколы верхних уровней в полном объеме (например,  не применяя протокол IP для продвижения пакетов), выполняют классификацию на основе  признаков, содержащихся в заголовках пакетов этих протоколов – IP-адресах и портах TCP/UDP.</li>
<li>Маркирование трафика. Маркирование трафика обычно выполняется  на границе сети, а затем его результаты используются во всех промежуточных устройствах сети. В кадре Ethernet 802.3  отсутствует поле, в которое можно было бы поместить результат маркировки трафика. Однако этот недостаток исправляет спецификация 802.1р,   в которой имеются три бита дополнительного заголовка 802.1Q/р для хранения приоритета кадра.<br>Фактически, эти три бита служат для хранения признака одного из восьми классов трафика. Именно так трактует это поле стандарт 802.1 D-2004, куда вошла спецификация 802.1р. В приложении G стандарта  802.1 D-2004 даются рекомендации по разделению всего трафика локальных сетей на семь классов:
<ul>
<li>NC (управление сетью). Управлению  сетью дается высший приоритет при  обслуживании, так как от своевременного принятия решения и доставки управляющей информации сетевым устройствам зависят любые характеристики сети.</li>
<li>VO (голос). Голосовому трафику требуется обеспечить задержку менее 10мс.</li>
<li>VI (видео). Видеотрафику требуется обеспечить задержку менее 100мс.</li>
<li>CL (контролируемая нагрузка). При применении важных бизнес-приложений  требуется некоторая форма контроля допуска (admission control) и резервирование пропускной способности для потока.</li>
<li>EE (улучшенное обслуживание). Это улучшенный вариант обслуживания по возможности, не дающий никаких гарантий пропускной способности.</li>
<li>BE (Обслуживание по возможности, или с максимальными усилиями). Стандартное обслуживание в локальных сетях.</li>
<li>BK (фоновый трафик). Наименее чувствительный к задержкам трафик, например трафик резервного копирования, источник которого может передавать большие объемы данных, поэтому его целесообразно выделить в особый класс, чтобы он не замедлял обработку других типов трафика.</li></ul>
<li>Управление очередями. Коммутатор, поддерживающий параметры  QoS, позволяет использовать несколько очередей для дифференцированной обработки классов трафика. Очереди могут обслуживаться в соответствии с алгоритмом приоритетной обработки, алгоритмом взвешенного обслуживания или на основе комбинации этих алгоритмов.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутатор обычно поддерживает некоторое магистральное количество очередей, которое может оказаться меньше, чем требуемое число классов трафика. В этой ситуации несколько классов  будут обслуживаться одной очередью, то есть фактически сольются в один класс.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Стандарт 802.1 D-2004 дает рекомендации в отношении того, какие классы трафика нужно реализовывать в сети в условиях ограниченного количества очередей в коммуникаторе (таблица 4.1).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Таблица 4.1 – Классы трафика и количество очередей</p>
  <table align="center" width="350" border="1">
  <tr>
    <th scope="col">Количество трафика</th>
    <th width="250" scope="col">Классы трафика</th>
  </tr>
  <tr align="center">
    <td>1</td>
    <td width="250">{BE, EE, BK, VO, CL, VI, NC}</td>
  </tr>
  <tr align="center">
    <td>2</td>
    <td width="250">{BE, EE, BK}<br>{VO, CL, VI, NC}</td>
  </tr>
  <tr align="center">
    <td>3</td>
    <td width="250">{BE, EE, BK}<br>{CL, VI}<br>{VO, NC}</td>
  </tr>
  <tr align="center">
    <td>4</td>
    <td width="250">{BK}<br>{BE, EE}<br>{CL, VI}<br>{VO, NC}</td>
  </tr>
  <tr align="center">
    <td>5</td>
    <td width="250">{BK}<br>{BE, EE}<br>{CL}<br>{VI}<br>{VO, NC}</td>
  </tr>
  <tr align="center">
    <td>6</td>
    <td width="250">{BK}<br>{BE}<br>{EE}<br>{CL}<br>{VI}<br>{VO, NC}</td>
  </tr>
  <tr align="center">
    <td>7</td>
    <td width="250">{BK}<br>{BE}<br>{EE}<br>{CL}<br>{VI}<br>{VO}<br>{NC}</td>
  </tr>
</table>
  
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При существовании только одной очереди в сети все классы трафика обслуживаются этой очередью. На самом деле все классы обслуживаются с обычным качеством (по возможности), так как за счет управления очередями  и резервирование полосы пропускания, для общего трафика остаются.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Две очереди дают возможность дифференцированно обслуживать группы классов трафика менее требовательные классы BK, BE и EE в одной очереди, а более требовательные классы VO, CL, VI, NC – в другой.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Дальнейшее увеличение количества очередей позволяет более дифференцированно  обслуживать трафик, вплоть до рекомендуемых семи классов. Предположенная схема является только рекомендацией, администратор сети может делить трафик на классы по своему усмотрению.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кроме того, допускается обслуживание индивидуальных потоков трафика, но при этом каждый коммутатор должен самостоятельно выделять поток из общего трафика, так как в кадре Ethernet нет поля переноса через сеть метки потока. В качестве признака класса трафика можно использовать номер виртуальной сети. Этот признак можно также комбинировать со значениями поля приоритета кадра, получая большое число различных классов.</p>
<ol start="4"><li>Резервирование и профилирование. Коммутаторы локальных сетей поддерживают методы резервирования пропускной способности интерфейсов для классов трафика или индивидуальных потоков. Обычно  коммутатор разрешает назначить классу или потоку минимальную скорость передачи данных, которая гарантируется в периоды перегрузок, а также максимальную скорость передачи данных, которая контролируется механизмом профилирования.</li></ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для коммутаторов локальных сетей не существует стандартного протокола резервирования ресурсов. Поэтому для выполнения резервирования администратор сети должен сконфигурировать каждый коммутатор сети отдельно.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Применение коммутаторов позволяет преодолеть ограничения, свойственные сетям с разделяемой средой. Коммутируемые локальные сети могут покрывать значительные территории, плавно переходя в сети мегаполисов; они могут состоять из сегментов различной пропускной способности, образуя сети с очень высокой производительностью; они могут использовать альтернативные  маршруты для повышения надежности и производительности. Однако построение сложных сетей без маршрутизаторов, а только на основе коммутаторов имеет существенные ограничения.</p>
<ul>
<li>Серьезные ограничения по-прежнему накладываются на топологию коммутируемой локальной сети. Требование отсутствия петель преодолевается с помощью техники STP/RSTP/MSTP и агрегирования каналов лишь частично. Действительно, STP не позволяет задействовать все альтернативные маршруты для  передачи пользовательского трафика, а агрегирования каналов разрешает так делать только на участке сети между двумя соседними коммутаторами. Подобные ограничения не позволяют применять многие эффективные топологии, пригородные для передачи трафика.</li>
<li>Логические сегменты сети, расположенные между коммутаторами, слабо изолированы друг от друга, а именно – не защищены от так называемых широковещательных штормов. Использование же механизма виртуальных сетей, реализованного во многих коммутаторах, хотя и позволяет достаточно гибко создавать изолированные по трафику группы станций, при этом изолирует их полностью, то есть так, что узлы одной виртуальной сети не могут взаимодействовать с узлами другой виртуальной сети.</li>
<li>В сетях, построенных на основе мостов и коммутаторов, достаточно сложно решается задача фильтрации трафика на основе данных, содержащихся в пакете. В таких сетях фильтрации выполняется только с помощью пользовательских фильтров, для создания которых администратору приходится иметь дело с двоичным представлением содержимого пакетов.</li>
<li>Реализация транспортной подсистемы только средствами физического и канального уровней приводит к недостаточно гибкой одноуровневой системе адресации в качестве адреса назначения используется MAC-адрес, жестко связанный с сетевым адаптером.</li>
<li>У коммутаторов ограничены возможности по трансляции потоков при создании гетерогенной сети. Они не могут транслировать протоколы WAN в протоколы LAN из-за различий в системе адресации этих сетей, а также различных значений максимального размера поля данных.</li>
</ul>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Наличие серьезных ограничений у протоколов канального уровня показывает, что построение на основе средств этого уровня больших неоднородных сетей является весьма проблематичным. Естественное решение в этих случаях – привлечение средств более высокого сетевого уровня.</p>
<!-- 88888888 -->
</font>
<p align="center">
		<a name="4.5"><font class="big"> 4.5 Маршрутизатор</font></a>
</p>
<p align="center">
		<a name="4.5.1"><font class="big"> 4.5.1 Особенности маршрутизаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Известно, что для разделения сети на сегменты используются мосты и коммутаторы. Они экранируют локальный трафик внутри сегмента, не передавая за его пределы никаких кадров, кроме тех, которые адресованы компьютерам, находящимся в других сегментах. Тем самым, сеть распадается на отдельные подсети. Это позволяет более рационально выбирать пропускную способность имеющихся линий связи, учитывая интенсивность трафика внутри каждой группы, а также активность обмена данными между группами.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Однако локализация трафика средствами мостов и коммутаторов имеет существенные ограничения. С одной стороны, логические сегменты сети, расположенные между мостами, недостаточно изолированы друг от друга, а именно, они не защищены от так называемых широковещательных штормов. Если какая-либо станция посылает широковещательное сообщение, то это сообщение передается всем станциям всех логических сегментов сети. Защита от широковещательных штормов в сетях, построенных на основе мостов, имеет количественный, а не качественный характер: администратор просто ограничивает количество широковещательных пакетов, которое разрешается генерировать некоторому узлу.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;С другой стороны, использование механизма виртуальных сегментов, реализованного в коммутаторах локальных сетей, приводит к полной локализации трафика - такие сегменты полностью изолированы друг от друга, даже в отношении широковещательных кадров. Поэтому в сетях, построенных только на мостах и коммутаторах, компьютеры, принадлежащие разным виртуальным сегментам, не образуют единой сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Приведенные недостатки мостов и коммутаторов связаны с тем, что они работают по протоколам канального уровня, в которых в явном виде не определяется понятие части сети (или подсети, или сегмента), которое можно было бы использовать при структуризации большой сети. Вместо того, чтобы усовершенствовать канальный уровень, разработчики сетевых технологий решили поручить задачу построения составной сети новому уровню – сетевому и устройству, работающему на этом уровне - маршрутизатору.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В отличие от моста и коммутатора, которые не знают, как связаны сегменты друг с другом за пределами их портов, маршрутизатор, работающий на сетевом уровне видит всю картину связей подсетей друг с другом, поэтому он может выбрать правильный маршрут и при наличии нескольких альтернативных маршрутов. Решение о выборе того или иного маршрута принимается каждым маршрутизатором, через который проходит сообщение. Маршрутизатор принимает решение о передаче пакетов на основании более полной информации о графе связей в сети, чем мост или коммутатор.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизатор имеет в своем распоряжении базу топологической информации, которая говорит ему, например, о том, между какими подсетями общей сети имеются связи и в каком состоянии (работоспособном или нет) они находятся. Имея такую карту сети, маршрутизатор может выбрать один из нескольких возможных маршрутов доставки пакета адресату.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для того, чтобы иметь информацию о текущей конфигурации сети, маршрутизаторы обмениваются маршрутной информацией между собой по специальному протоколу. Протоколы этого типа называются протоколами обмена маршрутной информацией (или протоколами маршрутизации) – RIP (Routing Information Protocol) и OSPF (Open Shortest Path First).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При использовании протокола маршрутизации RIP, основным критерием выбора наиболее эффективного пути является минимальное число "хопов" (hops), т.е. сетевых устройств между узлами. Этот протокол минимально загружает процессор маршрутизатора и предельно упрощает процесс конфигурирования, но он не рационально управляет трафиком. При использовании OSPF наилучший путь выбирается не только с точки зрения минимизации числа "хопов" (hop), но и с учетом других критериев: производительности сети, задержки при передаче пакета и т.д.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для того, чтобы доставить удаленному маршрутизатору пакет протокола обмена маршрутной информацией, используется протокол сетевого уровня, так как только он может передать информацию между маршрутизаторами, находящихся в разных сетях. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;С помощью протоколов обмена маршрутной информацией маршрутизаторы составляют карту межсетевых связей той или иной степени подробности и принимают решение о том, какому следующему маршрутизатору нужно передать пакет для образования рационального пути. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизаторы образуют логические сегменты посредством явной адресации, поскольку используют не плоские аппаратные, а составные числовые адреса. В этих адресах имеется поле номера сети, так что все компьютеры, у которых значение этого поля одинаково, принадлежат к одному сегменту, называемому в данном случае подсетью (subnet). </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Другой очень важной функцией маршрутизаторов является их способность связывать в единую сеть подсети, построенные с использованием разных сетевых технологий, например Ethernet и Х.25 (рисунок 4.32).</p>
<p align="center"><img src="img/chapter4/4.32.jpg"/></p>
<p align="center">Рисунок 4.32 – Пример составной сети</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При этом, под маршрутом понимают последовательность прохождения пакетом маршрутизаторов. Так, на рисунке 4.33 для связи станций L2 сети LAN1 и L1 сети LAN6 возможны несколько маршрутов: М1-М5-М7, М1-М6-М7, М1-М2-М3-М4-М5-М7 и М1-М2-М3-М4-М6-М7. </p>
<p align="center"><img src="img/chapter4/4.33.jpg"/></p>
<p align="center">Рисунок 4.33 - Структура интерсети, построенной на основе маршрутизаторов</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Где M1, M2, ... , M7 – маршрутизаторы;</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LAN1, LAN2, LAN3, WAN4, WAN5, LAN6 - уникальные номера сетей в едином формате;</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L1, L2, ... - локальные номера узлов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизаторы не только объединяют сети, но и надежно защищают их друг от друга. Причем эта изоляция осуществляется гораздо проще и надежнее, чем с помощью мостов и коммутаторов. Например, при поступлении кадра с неправильным адресом мост или коммутатор обязан повторить его на всех своих портах, что делает сеть незащищенной от некорректно работающего узла. Маршрутизатор же в таком случае просто отказывается передавать "неправильный" пакет дальше, изолируя дефектный узел от остальной сети.</p>
</font>
<p align="center">
		<a name="4.5.2"><font class="big"> 4.5.2 Функции маршрутизаторов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Основная функция маршрутизатора - чтение заголовков пакетов сетевых протоколов, принимаемых и буферизуемых по каждому порту и принятие решения о дальнейшем маршруте следования пакета по его сетевому адресу, включающему как правило, номера сети и узла.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Функции маршрутизатора могут быть разбиты на три группы в соответствии  с уровнями модели OSI (рисунок 4.34).</p>
<p align="center"><img src="img/chapter4/4.34.jpg"/></p>
<p align="center">Рисунок 4.34 - Функциональная модель маршрутизаторов</p>
</font>
<p align="center">
		<a name="4.5.2.1"><font class="big"> 4.5.2.1 Уровень интерфейсов</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На нижнем уровне маршрутизатор, как и любое устройство, подключенное к  сети, обеспечивает физический интерфейс со средой передачи, включая согласование уровней электрических сигналов, линейное и логическое кодирование, оснащение определенным типом разъема. В разных моделях маршрутизаторов часто предусматриваются различные наборы физических интерфейсов, представляющих собой комбинацию портов для подсоединения локальных и глобальных сетей. С каждым интерфейсом для подключения  локальной сети неразрывно связан определенный протокол начального уровня, например семейства Ethernet, Token Ring, FDDI. Интерфейсы  для присоединения  к глобальным сетям, чаще всего определяют только некоторый стандарт физического уровня, поверх которого в маршрутизаторе могут разработать различные протоколы канального уровня. Например, глобальный порт может поддерживать интерфейс V.35, поверх которого могут работать различные протоколы канального уровня PPP (передает трафик IP и других сетевых протоколов), LAP-B (используемый в сетях Х.25), LAP-F(используемый в сетях Frame Relay), LAP-D (используемый в сетях ISDN), ATM. Разница между интерфейсами локальных и глобальных сетей объясняется тем, что технологии локальных сетей определяют стандарты как физического, так и канального уровней, которые могут применяться только вместе.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Интерфейсы маршрутизатора выполняют полный набор функций физического и канального уровней по передаче кадра, включая получение доступа к среде (если это необходимо), формирование битовых сигналов, прием кадра, подсчет его контрольной суммы и передачу поля данных кадра верхнему уровню при корректном значении контрольной суммы.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Необходимо отметить, что как и любой конечный узел, каждый порт маршрутизатор имеет собственный аппаратный адрес (в локальных сетях это MAC-адрес), по которому другие узлы направляют ему кадры, требующие маршрутизации.</p>
<p style="text-align:justify">Необходимо отметить, что как и любой конечный узел, каждый порт маршрутизатор имеет собственный аппаратный адрес (в локальных сетях это MAC-адрес), по которому другие узлы направляют ему кадры, требующие маршрутизации.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Перечень физических интерфейсов, которые поддерживает та или иная модель маршрутизатора, является его важнейшей потребительской характеристикой. Маршрутизатор должен поддерживать все протоколы канального и физического уровней, используемые в каждой из сетей, к которым он будет непосредственно присоединен. На рисунке 18.27 показана функциональная модель маршрутизатора с четырьмя портами, результирующими физическими интерфейсы 10Base-T и 10Base-2 для двух портов Ethernet, UTP, Token Ring, а также интерфейс V.35, поверх которого может работать протокол LAP-B, LAP-D, LAP-F, обеспечивая подключение к сетям X.25, ISDN ИЛИ Frame Relay. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Кадры, которые поступают на порты маршрутизатора, после обработки соответствующими протоколами физического и канального уровней освобождаются от заголовков канального уровня. Извлеченные из поля данных кадра пакеты передаются модулю сетевого протокола.</p>
</font>
<p align="center">
		<a name="4.5.2.2"><font class="big"> 4.5.2.2 Уровень сетевого протокола</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Сетевой протокол, в свою очередь, извлекает из пакета заголовок сетевого уровня, анализирует и корректирует его содержимое. Прежде всего, проверяется контрольная сумма, и если пакет пришел поврежденным, он отрабатывается. Кроме того, выполняется проверка на превышение времени жизни пакета (время, которое пакет провел в сети). Если превышение имело место то пакет тоже отбрасывается. На этом этапе вносятся корректировки в содержимое некоторых полей, например, наращивается время жизни пакета, пересчитывается контрольная сумма.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;На сетевом уровне выполняется одна из важнейших функций  маршрутизатора – <em>фильтрация трафика</em>.  Пакет сетевого уровня, находящийся  в поле данных кадра, для мостов/коммутаторов представляется неструктурированной  двоичной последовательностью.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизаторы же, программное обеспечение которых содержит модуль сетевого протокола, способны производить анализ отдельных поле пакета.  Они оснащаются развитыми средствами пользовательского интерфейса, которые позволяют администратору без особых усилий задавать сложные правила фильтрации. Маршрутизаторы, как правило, позволяют также анализировать структуру сообщений транспортного уровня, поэтому фильтры могут не пропускать  в сеть сообщений определенных прикладных служб, например службы telnet, анализируя поле типа протокола в транспортном сообщении.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Однако основной  функцией сетевого уровня маршрутизатора  является определение маршрута пакета. По номеру сети, извлеченному из заголовка пакета, модуль сетевого протокола находит в таблице маршрутизации строку, содержащую сетевой адрес следующего маршрутизатора и номер порта, на который нужно передать данный пакет, чтобы он двигался в правильном направлении.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Перед тем как передать сетевой адрес следующего маршрутизатора на канальный уровень, необходимо преобразовать его в локальный адрес той технологии, которая используется в сети, содержащей следующий маршрутизатор. Для этого сетевой протокол обращается к протоколу разрешения адресов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;С сетевого уровня пакет, локальный адрес следующего маршрутизатора и номер порта маршрутизатора передаются вниз, канальному уровню. На основании указанного номера порта осуществляется коммутация с одним из интерфейсов маршрутизатора, средствами которого выполняется упаковка пакета в кадр соответствующего формата. В после адреса назначения заголовка кадра помещается локальный адрес следующего маршрутизатора. Готовый кадр отправляется в сеть.</p>
</font>
<p align="center">
		<a name="4.5.2.3"><font class="big"> 4.5.2.3 Уровень протокола маршрутизации</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Сетевые протоколы активно используют в своей работе таблицу маршрутизации, но, ни ее построением, ни поддержанием не занимаются. Эти функции выполняют протоколы маршрутизации, с помощью которых маршрутизаторы обмениваются информацией о топологии сети, а затем анализируют полученные сведения, определяя наилучшие по тем или иным критериям маршруты. Результаты анализа и составляют содержимое таблиц маршрутизации. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Помимо  перечисленных функций на маршрутизаторы могут быть возложены и другие обязанности, например операции, связанные с фрагментацией.</p>
</font>
<p align="center">
		<a name="4.5.3"><font class="big"> 4.5.3 Таблицы маршрутизации</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Проблема выбора наилучшего пути называется маршрутизацией, и ее решение является одной из главных задач сетевого уровня. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизация - процесс определения в сети пути, по которому блок данных может достигнуть адресата. Основная же задача маршрутизации - переключение трафика. Переключение - это процесс приема сообщения, выбора подходящего маршрута дальнейшего следования и отправка его по этому маршруту. Данная операция обслуживается четырьмя различными процессами: входным драйвером, процессом выбора маршрута, очередью и выходным драйвером.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизация выполняется на основе данных, содержащихся в таблице маршрутов. Строка в таблице маршрутов состоит из следующих полей: адрес сети назначения; адрес следующего маршрутизатора (то есть узла, который знает, куда дальше отправить дейтаграмму, адресованную в сеть назначения); вспомогательные поля. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизация решает две задачи:
<ul>
<li>выбор оптимального, по некоторому критерию, пути продвижения информации от источника к пункту назначения через объединенную сеть;</li>
<li>транспортировка информационных блоков (пакетов) по выбранному мар-шруту, или коммутация.</li>
</ul></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизация осложняется тем, что самый короткий путь - не всегда самый лучший. В качестве критериев выбора могут выступать, например:
<ul>
<li>номинальная пропускная способность;</li>
<li>загруженность каналов связи; </li>
<li>задержки, вносимые каналами; </li>
<li>количество промежуточных транзитных узлов; </li>
<li>надежность каналов и транзитных узлов;</li>
<li>расстояние между удаленными сетями.</li>
</ul></p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Существует два основных алгоритма определения наиболее выгодного пути и способа доставки данных: RIP и OSPF. При использовании протокола маршрутизации RIP, основным критерием выбора наиболее эффективного пути является минимальное число "хопов" (hops), т.е. сетевых устройств между узлами. Этот протокол минимально загружает процессор маршрутизатора и предельно упрощает процесс конфигурирования, но он не рационально управляет трафиком. При использовании OSPF наилучший путь выбирается не только с точки зрения минимизации числа хопов (hop), но и с учетом других критериев: производительности сети, задержки при передаче пакета и т.д. Рассмотрим принципы формирования таблиц маршрутизации на примере составной сети, изображенной на рисунке 4.35.</p>
<p align="center"><img src="img/chapter4/4.35.jpg"/></p>
<p align="center">Рисунок 4.35 - Принципы маршрутизации в составной сети</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В данной сети 20 маршрутизаторов объединяют 18 сетей в общую сеть; S1, S2, ... , S20 - это номера сетей. Маршрутизаторы имеют по нескольку портов (по крайней мере, по два), к которым присоединяются сети. Каждый порт маршрутизатора можно рассматривать как отдельный узел сети: он имеет собственный сетевой адрес и собственный локальный адрес в той подсети, которая к нему подключена. Например, маршрутизатор под номером 1 имеет три порта, к которым подключены сети S1, S2, S3. На рисунке сетевые адреса этих портов обозначены как М1(1), M1(2) и М1(3). Порт М1(1) имеет локальный адрес в сети с номером S1, порт M1 (2) - в сети S2, а порт М1(3) - в сети S3. Таким образом, маршрутизатор можно рассматривать как совокупность нескольких узлов, каждый из которых входит в свою сеть. Как единое устройство маршрутизатор не имеет ни отдельного сетевого адреса, ни какого-либо локального адреса.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Чтобы по адресу сети назначения можно было бы выбрать рациональный маршрут дальнейшего следования пакета, каждый маршрутизатор анализируют специальную информационную структуру, которая называется таблицей маршрутизации. Используя условные обозначения для сетевых адресов маршрутизаторов и номеров сетей в том виде, как они приведены на рисунке 4, таблица маршрутизации для маршрутизатора 4 выглядела бы так, как в таблице 1.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Таблица 4.2 – Пример таблицы маршрутизации маршрутизатора 4</p>
<table align="center" width="492" border="1">
  <tr>
    <th width="93" scope="col">Номер сети назначения</th>
    <th width="135" scope="col">Сетевой адрес порта следующего маршрутизатора</th>
    <th width="94" scope="col">Сетевой адрес выходного порта</th>
    <th width="142" scope="col">Расстояние до сети назначения</th>
  </tr>
  <tr>
    <td>S1</td>
    <td>M1(2)</td>
    <td>M4(1)</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S2</td>
    <td>-</td>
    <td>M4(1)</td>
    <td width="142">0 (подсоединена)</td>
  </tr>
  <tr>
    <td>S3</td>
    <td>M1(2)</td>
    <td>M4(1)</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S4</td>
    <td>M2(1)</td>
    <td>M4(1)</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S5</td>
    <td>-</td>
    <td>M4(2)</td>
    <td width="142">0 (подсоединена)</td>
  </tr>
  <tr>
    <td>S6</td>
    <td>M2(1)</td>
    <td>M4(1)</td>
    <td width="142">2</td>
  </tr>
  <tr>
    <td>Default</td>
    <td>M5(1)</td>
    <td>M4(2)</td>
    <td width="142">-</td>
  </tr>
</table>

<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В первом столбце таблицы перечисляются номера сетей, входящих в интерсеть. В каждой строке таблицы следом за номером сети указывается сетевой адрес следующего маршрутизатора (более точно, сетевой адрес соответствующего порта следующего маршрутизатора), на который необходимо направить пакет, чтобы тот передвигался по направлению к сети с данным номером по рациональному маршруту.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Когда на маршрутизатор поступает новый пакет, номер сети назначения, извлеченный из поступившего кадра, последовательно сравнивается с номерами сетей из каждой строки таблицы. Строка с совпавшим номером сети указывает, на какой ближайший маршрутизатор следует направить пакет. Например, если на какой-либо порт маршрутизатора 4 поступает пакет, адресованный в сеть S6, то из таблицы маршрутизации следует, что адрес следующего маршрутизатора - М2(1), то есть очередным этапом движения данного пакета будет движение к порту 1 маршрутизатора 2.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Перед тем как передать пакет следующему маршрутизатору, текущий маршрутизатор должен определить, на какой из нескольких собственных портов он должен поместить данный пакет. Для этого служит третий столбец таблицы маршрутизации.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В таблице маршрутизации маршрутизатора 4 расстояние между сетями измерялось хопами. Расстояние для сетей, непосредственно подключенных к портам маршрутизатора, здесь принимается равным 0, однако в некоторых реализациях отсчет расстояний начинается с 1.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Поскольку пакет может быть адресован в любую сеть составной сети, может показаться, что каждая таблица маршрутизации должна иметь записи обо всех сетях, входящих в составную сеть. Но при таком подходе в случае крупной сети объем таблиц маршрутизации может оказаться очень большим, что повлияет на время ее просмотра, потребует много места для хранения. Поэтому на практике число записей в таблице маршрутизации стараются уменьшить за счет использования специальной записи - "маршрутизатор по умолчанию" (default). Действительно, если принять во внимание топологию составной сети, то в таблицах маршрутизаторов, находящихся на периферии составной сети, достаточно записать номера сетей, непосредственно подсоединенных к данному маршрутизатору или расположенных поблизости, на тупиковых маршрутах. Обо всех же остальных сетях можно сделать в таблице единственную запись, указывающую на маршрутизатор, через который пролегает путь ко всем этим сетям. Такой маршрутизатор называется маршрутизатором по умолчанию, а вместо номера сети в соответствующей строке помещается особая запись, default.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В данном примере таким маршрутизатором по умолчанию для сети S5 является маршрутизатор 5, точнее его порт М5(1). Это означает, что путь из сети S5 почти ко всем сетям большой составной сети пролегает через этот порт маршрутизатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Задачу маршрутизации решают не только промежуточные узлы - маршрутизаторы, но и конечные узлы - компьютеры. Средства сетевого уровня, установленные на конечном узле, при обработке пакета должны, прежде всего, определить, направляется ли он в другую сеть или адресован какому-нибудь узлу данной сети. Если номер сети назначения совпадает с номером данной сети, то для данного пакета не требуется решать задачу маршрутизации. Если же номера сетей отправления и назначения не совпадают, то маршрутизация нужна. Таблицы маршрутизации конечных узлов полностью аналогичны таблицам маршрутизации, хранящимся на маршрутизаторах.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Что касается таблицы маршрутизации для конечного узла В, она могла бы выглядеть следующим образом (таблица 4.3). Здесь MB - сетевой адрес порта компьютера В. На основании этой таблицы конечный узел В выбирает, на какой из двух имеющихся в локальной сети S3 маршрутизаторов следует посылать тот или иной пакет.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Таблица 4.3 - Пример таблицы маршрутизации конечного узла В</p>
<table align="center" width="492" border="1">
  <tr>
    <th width="93" scope="col">Номер сети назначения</th>
    <th width="135" scope="col">Сетевой адрес порта следующего маршрутизатора</th>
    <th width="94" scope="col">Сетевой адрес выходного порта</th>
    <th width="142" scope="col">Расстояние до сети назначения</th>
  </tr>
  <tr>
    <td>S1</td>
    <td>M1(3)</td>
    <td>MB</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S2</td>
    <td>M1(3)</td>
    <td>MB</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S3</td>
    <td>-</td>
    <td>MB</td>
    <td width="142">0</td>
  </tr>
  <tr>
    <td>S4</td>
    <td>M3(1)</td>
    <td>MB</td>
    <td width="142">1</td>
  </tr>
  <tr>
    <td>S5</td>
    <td>M1(3)</td>
    <td>MB</td>
    <td width="142">2</td>
  </tr>
  <tr>
    <td>S6</td>
    <td>M3(1)</td>
    <td>MB</td>
    <td width="142">2</td>
  </tr>
  <tr>
    <td>Default</td>
    <td>M3(1)</td>
    <td>MB</td>
    <td width="142">-</td>
  </tr>
</table>

</font>
<p align="center">
		<a name="4.5.4"><font class="big"> 4.5.4 Алгоритмы маршрутизации</font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Алгоритмы маршрутизации это часть программного обеспечения сетевого уровня, которая отвечает за определение по какому маршруту отправлять пакет дальше. При этом, определенный алгоритм маршрутизации должен сохранять работоспособность, не зависимо ни от каких сбоев или отказов в сети, изменений в ее топологии: отключение хостов, машин подсети, разрушения каналов и т.п. Также он должен адаптироваться ко всем таким изменения, не требуя перезагрузки сети или остановки хостов. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При этом, необходимо отметить, что при разработке алгоритмов маршрутизации часто преследуют одну или несколько из перечисленных ниже целей:</p>
<ol>
<li>Оптимальность. Она характеризует способность алгоритма маршрутизации выбирать "наилучший" маршрут. Наилучший маршрут зависит от показателей и от "веса" этих показателей, используемых при проведении расчета. Например, алгоритм маршрутизации мог бы использовать несколько пересылок с определенной задержкой, но при расчете "вес" задержки может быть им оценен как очень значительный. Естественно, что протоколы маршрутизации должны строго определять свои алгоритмы расчета показателей.</li>
<li>Простота и низкие непроизводительные затраты. Алгоритмы маршрутизации разрабатываются как можно более простыми. Другими словами, алгоритм маршрутизации должен эффективно обеспечивать свои функциональные возможности, с минимальными затратами программного обеспечения и коэффициентом использования. Особенно важна эффективность в том случае, когда программа, реализующая алгоритм маршрутизации, должна работать в компьютере с ограниченными физическими ресурсами.</li>
<li>Живучесть и стабильность. Алгоритмы маршрутизации должны обладать живучестью. Другими словами, они должны четко функционировать в случае неординарных или непредвиденных обстоятельств, таких как отказы аппаратуры, условия высокой нагрузки и некорректные реализации. Так как маршрутизаторы расположены в узловых точках сети, их отказ может вызвать значительные проблемы.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Часто наилучшими алгоритмами маршрутизации оказываются те, которые выдержали испытание временем и доказали свою надежность в различных условиях работы сети.</p>
<ol start="4">
<li>Быстрая сходимость. Алгоритмы маршрутизации должны быстро сходиться. Сходимость - это процесс соглашения между всеми маршрутизаторами по оптимальным маршрутам. Когда какое-нибудь событие в сети приводит к тому, что маршруты или отвергаются, или становятся доступными, маршрутизаторы рассылают сообщения об обновлении маршрутизации. Сообщения об обновлении маршрутизации пронизывают сети, стимулируя пересчет оптимальных маршрутов и, в конечном итоге, вынуждая все маршрутизаторы придти к соглашению по этим маршрутам. Алгоритмы маршрутизации, которые сходятся медленно, могут привести к образованию петель маршрутизации или выходам из строя сети. </li>
<li>Гибкость. Алгоритмы маршрутизации должны быть также гибкими. Другими словами, алгоритмы маршрутизации должны быстро и точно адаптироваться к разнообразным обстоятельствам в сети. Например, предположим, что сегмент сети отвергнут. Многие алгоритмы маршрутизации, после того как они узнают об этой проблеме, быстро выбирают следующий наилучший путь для всех маршрутов, которые обычно используют этот сегмент. Алгоритмы маршрутизации могут быть запрограммированы таким образом, чтобы они могли адаптироваться к изменениям полосы пропускания сети, размеров очереди к маршрутизатору, величины задержки сети и других переменных. </li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Необходимо отметить, что на сегодняшний день используется большое количество алгоритмов маршрутизации, которые могут быть классифицированы по различным типам. При этом, для каждого алгоритма маршрутизации могут использоваться различные протоколы, работающие на сетевом уровне стека TCP/IP.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Типы алгоритмов маршрутизации:</p>
<ol>
<li>Статические и адаптивные (динамические). При <em>статической маршрутизации</em> все записи в таблице имеют неизменяемый, статический статус, что подразумевает бесконечный срок их жизни. Записи о маршрутах составляются и вводятся в память каждого маршрутизатора вручную администратором сети. При изменении состояния сети администратору необходимо срочно отразить эти изменения в соответствующих таблицах маршрутизации, иначе может произойти их рассогласование, и сеть будет работать некорректно. Алгоритмы, использующие статические маршруты, просты для разработки и хорошо работают в окружениях, где трафик сети относительно предсказуем, а схема сети относительно проста.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Так как статические алгоритмы маршрутизации не могут реагировать на изменения в сети, они, как правило, считаются непригодными для современных крупных, постоянно изменяющихся сетей. Большинство доминирующих алгоритмов маршрутизации  - адаптивные (динамические).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Адаптивные (динамические) алгоритмы</em> маршрутизации подстраиваются к изменяющимся обстоятельствам сети в масштабе реального времени. Они выполняют это путем анализа поступающих сообщений об обновлении маршрутизации. Если в сообщении указывается, что имело место изменение сети, программы маршрутизации пересчитывают маршруты и рассылают новые сообщения о корректировке маршрутизации. Такие сообщения пронизывают сеть, стимулируя маршрутизаторы заново прогонять свои алгоритмы и соответствующим образом изменять таблицы маршрутизации.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Динамические алгоритмы маршрутизации могут дополнять статические маршруты там, где это уместно. При адаптивной маршрутизации все изменения конфигурации сети автоматически отражаются в таблицах маршрутизации благодаря протоколам маршрутизации. Эти протоколы собирают информацию о топологии связей в сети, что позволяет им оперативно отрабатывать все текущие изменения. В таблицах  маршрутизации при адаптивной маршрутизации обычно имеется информация об интервале времени, в течение которого данный маршрут будет оставаться действительным. Это время называют временем жизни маршрута. Если по истечении времени жизни существование маршрута не подтверждается протоколом маршрутизации, то он считается нерабочим, пакеты по нему больше не посылаются.</p>
<ol start="2">
<li>Одномаршрутные и многомаршрутные алгоритмы. Некоторые сложные протоколы маршрутизации обеспечивают множество маршрутов к одному и тому же пункту назначения. Такие <em>многомаршрутные алгоритмы</em> делают возможной мультиплексную передачу трафика по многочисленным линиям. <em>Одномаршрутные</em> алгоритмы не могут делать этого. Преимущества многомаршрутных алгоритмов очевидны - они могут обеспечить большую пропускную способность и надежность. </li>
<li>Одноуровневые и иерархические алгоритмы. Некоторые алгоритмы маршрутизации оперируют в плоском пространстве, в то время как другие используют иерархии маршрутизации. В <em>одноуровневой</em> системе маршрутизации все маршрутизаторы равны по отношению друг к другу. В <em>иерархической</em> системе маршрутизации некоторые маршрутизаторы формируют то, что составляет основу маршрутизации. Пакеты из небазовых маршрутизаторов перемещаются к базовым маршрутизаторам и пропускаются через них до тех пор, пока не достигнут общей области пункта назначения. Начиная с этого момента, они перемещаются от последнего базового маршрутизатора через один или несколько небазовых маршрутизаторов до конечного пункта назначения.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Системы маршрутизации часто устанавливают логические группы узлов, называемых доменами, или автономными системами (AS), или областями. В иерархических системах одни маршрутизаторы какого-либо домена могут сообщаться с маршрутизаторами других доменов, в то время как другие роутеры этого домена могут поддерживать связь с роутеры только в пределах своего домена. В очень крупных сетях могут существовать дополнительные иерархические уровни. Маршрутизаторы наивысшего иерархического уровня образуют базу маршрутизации. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Основным преимуществом иерархической маршрутизации является то, что она имитирует организацию большинства компаний и, следовательно, очень хорошо поддерживает их схемы трафика. Большая часть сетевой связи имеет место в пределах групп небольших компаний (доменов). Внутридоменным маршрутизаторам необходимо знать только о других маршрутизаторах в пределах своего домена, поэтому их алгоритмы маршрутизации могут быть упрощенными. Соответственно может быть уменьшен и трафик обновления маршрутизации, зависящий от используемого алгоритма маршрутизации. </p>
<ol start="4">
<li>Алгоритмы с интеллектом в главной вычислительной машине и в маршрутизаторе. Некоторые алгоритмы маршрутизации предполагают, что конечный узел источника определяет весь маршрут. Обычно это называют маршрутизацией от источника. В системах маршрутизации от источника маршрутизаторы действуют просто как устройства хранения и пересылки пакета.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Маршрутизация от источника</em> не требует наличия таблиц маршрутизации. В этом случае отправитель помещает в пакет информацию о том, какие промежуточные маршрутизаторы должны участвовать  в передаче пакета к сети назначения. На основе этой информации каждый маршрутизатор считывает адрес следующего маршрутизатора, и если он действительно является адресом его непосредственного соседа, передает ему пакет для дальнейшей обработки.  Вопрос о том, как отправитель узнает точный маршрут следования пакета через сеть остается открытым. Маршрут может задавать либо вручную администратор, либо автоматически узел-отправитель, но в том случае ему нужно поддерживать какой-либо протокол маршрутизации, который сообщит ему о топологии и состоянии сети. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Алгоритмы <em>с интеллектом в главной вычислительной машине</em> чаще выбирают наилучшие маршруты, так как они, как правило, находят все возможные маршруты к пункту назначения, прежде чем пакет будет отослан. Затем они выбирают наилучший маршрут, основываясь на определении оптимальности данной конкретной системы. Однако определение всех маршрутов часто требует значительного трафика поиска и объема времени.</p>
<ol start="5">
<li>Внутридоменные и междоменные алгоритмы. Некоторые алгоритмы маршрутизации действуют только в пределах доменов, другие - как в пределах доменов, так и между ними. Природа этих двух типов алгоритмов различная. Поэтому понятно, что оптимальный алгоритм внутридоменной маршрутизации не обязательно будет оптимальным алгоритмом междоменной маршрутизации.</li>
<li>Алгоритмы маршрутизации распределенные и централизованные. Алгоритмы адаптивной маршрутизации разделяются на распределенные и централизованные. При <em>распределенном подходе</em> все маршрутизаторы сети находятся в равных условиях, они находят маршруты и строят собственные таблицы маршрутизации, работая в тесной кооперации друг с другом, постоянно обмениваясь информацией о конфигурации сети.</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;При централизованном подходе в сети существует один выделенный маршрутизатор, который собирает всю информацию о топологии и состоянии сети от других маршрутизаторов. На основании этих данных выделенный маршрутизатор (который иногда называют сервером маршрутов) строит таблицы маршрутизации для всех остальных маршрутизаторов сети, а затем распространяет их по сети, чтобы каждый маршрутизатор получил собственную таблицу в дальнейшем самостоятельно принимал решение о продвижении каждого пакета.</p>
<ol start="7">
<li>Алгоритмы состояния связей и вектора расстояния (дистанционно-векторные). Применяемые сегодня в IP-сетях протоколы алгоритмов маршрутизации относятся к адаптивным распределенным протоколам, которые делятся на две группы:
<ul>
<li>дистанционно-векторные (Distance Vector Algorithm, DVA),</li>
<li>алгоритмы состояний связей (Link State Algorithm, LSA).</li>
</ul>
</li>
</ol>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В дистанционно-векторных алгоритмах (DVA) каждый маршрутизатор периодически и широковещательно рассылает по сети вектор, компонентами которого являются расстояния (измеренные в той или иной метрике) от данного маршрутизатора до всех известных сетей. Пакеты протоколов маршрутизации обычно называют объявлениями о расстоянии, так как с их помощью маршрутизатор объявляет остальным маршрутизаторам известные ему сведения о конфигурации сети.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Дистанционно-векторные алгоритмы требуют от каждого маршрутизатора посылки всей или части своей маршрутной таблицы, но только своим соседям. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Получив от некоторого соседа вектор расстояний (дистанций) до известных тому сетей, маршрутизатор наращивает компоненты вектора на величину расстояния от себя до данного соседа. Кроме того, он дополняет вектор информацией об известных ему самому других сетях, о которых он узнал непосредственно (если они подключены к его портам) или из аналогичных объявлений других маршрутизаторов. Обновленное значение вектора маршрутизатор рассылает своим соседям. В конце концов, каждый маршрутизатор узнает через соседние маршрутизаторы информацию обо всех имеющихся в составной сети сетей и расстояния до них. Затем он выбирает из нескольких альтернативных маршрутов к каждой сети тот маршрут, который обладает наименьшим значением метрики. Маршрутизатор, передавший информацию о данном маршруте, отмечается в таблице маршрутизации как следующий (next hop).</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Дистанционно-векторные алгоритмы хорошо работают только в небольших сетях. В больших сетях они периодически засоряют линии связи интенсивным трафиком, к тому же сетевые конфигурации не всегда корректно могут обрабатываться алгоритмом этого типа, так как маршрутизаторы не имеют точного представления о топологии связей сети, а располагают косвенной информацией -  вектором расстояний.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Наиболее распространенным протоколом, основанным на дистанционно-векторном алгоритме, является протокол RIP.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Алгоритмы состояния связей</em> (LSA) направляют потоки маршрутной информации во все узлы объединенной сети. Однако каждый маршрутизатор посылает только ту часть маршрутной таблицы, которая описывает состояние его собственных каналов. Алгоритмы состояния связей обеспечивают каждый маршрутизатор информацией,  достаточной для построения точного графа связей сети. Все маршрутизаторы работают на основании одного и того же графа, что делает процесс маршрутизации более устойчивым к изменениям конфигурации. Каждый маршрутизатор использует граф сети для нахождения оптимальных, по некоторому критерию, маршрутов до каждой из сетей, входящих в составную сеть.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Чтобы понять, в каком состоянии находятся линии связи, подключенные к его портам, маршрутизатор периодически обменивается короткими пакетами HELLO со своими ближайшими соседями. В отличие от протоколов DVA, которые регулярно передают векторы расстояний, протоколы LSA ограничиваются короткими сообщениями, а передача больших объемных сообщений происходит только в тех случаях, когда с помощью сообщений HELLO был установлен факт изменения состояния какой-либо связи.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Алгоритмы состояния связей фактически направляют небольшие корректировки по всем направлениям, в то время как алгоритмы вектора расстояний отсылают более крупные корректировки только в соседние маршрутизаторы. В результате служебный трафик, создаваемый протоколами LSA, гораздо менее интенсивный, чем протоколов DVA.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Протоколом, основанным на алгоритме состоянии связей, является протокол OSPF стека TCP/IP.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Отличаясь более быстрой сходимостью, алгоритмы состояния связей несколько меньше склонны к образованию петель маршрутизации, чем алгоритмы вектора расстояния. С другой стороны, алгоритмы состояния связей характеризуются более сложными расчетами в сравнении с алгоритмами вектора расстояний, требуя большей процессорной мощности и памяти, чем алгоритмы вектора расстояний. Вследствие этого, реализация и поддержка алгоритмов состояния связей может быть более дорогостоящей. Несмотря на их различия, оба типа алгоритмов хорошо функционируют при самых различных обстоятельствах.</p>
</font>
<p align="center">
		<a name="4.5.6"><font class="big"> 4.5.6 Классификация маршрутизаторов </font></a>
</p>
<font class="norm">
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;По областям применения маршрутизаторы делятся на несколько классов (рисунок 4.36). Маршрутизаторы можно разделить на группы по различным критериям. Первый критерий отражает один аспект их применения, а именно их положение относительно собственной и внешних сетей. По данному критерию маршрутизаторы существуют <em>магистральные</em> и <em>пограничные</em>.</p>
<p align="center"><img src="img/chapter4/4.36.jpg"/></p>
<p align="center">Рисунок 4.36 - Классы маршрутизаторов</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Магистральные маршрутизаторы</em> предназначены для построения магистральной сети оператора связи или крупной корпорации. Магистральные маршрутизаторы оперируют агрегированными информационными потоками, переносящими данные большого количества пользовательских соединений.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Для решения этой задачи магистральные маршрутизаторы оснащаются высокоскоростными интерфейсами, такими как ATM 155/622 Мбит/с, Gigabit Ethernet и 10G Ethernet, а также интерфейсами SONET/SDH со скоростями 155 Мбит/с до Гбит/с. Для получения отказоустойчивости топологии магистральной сети магистральные маршрутизаторы должны поддерживать несколько таких интерфейсов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Очевидно, что для того чтобы не создавать "узких мест" в магистральной сети, магистральный маршрутизаторы должен обладать очень высокой производительностью. Например, если маршрутизатор оснащен восемью интерфейсами по 10 Гбит/с (Ethernet или SDH), то его общая производительность должна составлять  80 Гбит/с. Для достижения такой производительности магистральные маршрутизаторы обладают распределенной внутренней архитектурой, подобной архитектуре коммутаторов локальных сетей. Каждый порт или группа портов оснащается собственным процессором, который самостоятельно выполняет продвижение IP–пакетов на основании локальной копии таблицы маршрутизации. Для передачи пакетов  между портами служит коммутирующий блок на основе разделяемой памяти, общей шины и коммутатора  каналов. Общие задачи, включая построение таблицы маршрутизации, хранение конфигурационных параметров, удаленное управление маршрутизации и.т.п., решает центральный блок управления.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Понятно, что функции продвижения IP- пакетов  существенно сложнее, чем продвижение кадров Ethernet и другие технологии локальных сетей. Поэтому процессоры портов обычно не нагружают дополнительными функциями, такими как фильтрация трафика или трансляция адресов. Даже обеспечение параметров QoS не всегда реализуется таким процессором в полном объеме – обычно дело ограничивается поддержанием очередей, а  до профилирования трафика не доходит. Это связано с тем, что магистральный маршрутизатор работает внутри магистральной сети и не взаимодействует с внешним миром, а значит, не выполняет пограничные функции, требующие фильтрации и профилирования. Другими словами, основная задача магистрального маршрутизатора – передача пакетов между своими интерфейсами  с как можно большей скоростью.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Большое количество интерфейсов, характерное для магистрального маршрутизатора, позволяет строить избыточные топологии, приближающийся к полносвязной схеме, и тем самым обеспечивать отказоустойчивость сети. Однако и сам магистральный маршрутизатор должен обладать высокой надежностью. Надежность и отказоустойчивость маршрутизатора достигается за счет избыточных модулей, таких как центральные процессоры, процессоры портов, источники питания.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Пограничные маршрутизаторы</em>, называемые также маршрутизаторами доступа, соединяют магистральную сеть с периферийными сетями. Эти маршрутизаторы образуют особый слой, который выполняет функции приема трафика от внешних по отношению к магистрали сетей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Периферийная сеть часто находиться под автономным административным управлением. Это может быть сеть клиента оператора связи, непосредственно присоединенная к его магистрали, или же сеть регионального отделения крупной корпорации, обладающей собственной магистралью.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;В любом случае трафик, поступающий на интерфейсы пограничного маршрутизатора от сети, которою администратор магистрали не может контролировать, нужно фильтровать и профилировать. Поэтому к пограничному маршрутизатору предъявляются другие требования, нежели к магистральному. На первый план поступают его способности максимальной гибкости при фильтрации и профилировании трафика. Кроме того, очень важно, чтобы производительность пограничного маршрутизатора не снижалась при выполнении этих дополнительных функции. Интерфейсы пограничного маршрутизатора менее скоростные, чем магистрального, но более разнообразные, так как ему приходиться присоединять к магистрали сети различных технологий.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Деление маршрутизаторов на магистральный и пограничный не является строгим и четким. Такое деление просто отражает предпочтительную область применения маршрутизатора, где в наибольшей степени проявляются его преимущества. В то же время любой маршрутизатор, оснащенный низкоскоростными портами, может одновременно играть роль пограничного. А маршрутизатор, хорошо исполняющий роль пограничного для крупной сети, может быть магистральным маршрутизатором для сети меньшего масштаба, где его интерфейсы вполне справятся с нагрузкой на магистраль.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Существуют и другие аспекты деления маршрутизаторов. Так, маршрутизаторы можно разделить на <em>маршрутизаторы операторов связи</em> и <em>корпоративные маршрутизаторы</em>.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Основным отличием <em>корпоративных маршрутизаторов</em> является их высокая надежность, а также поддержка полного набора функции, необходимых для коммерческой работы в Интернете, начиная от протокола BGP и заканчивая системами регистрации пользовательских потоков данных, что необходимо для биллинговых схем. Необходимость высокой надежности объясняется значительной стоимостью простоя маршрутизатора при оказании коммерческих услуг. Требования к надежности услуг передачи данных постоянно растут, пользователи Интернета и виртуальных частных сетей хотят, чтобы эти услуги были такими же надежными, как услуги телефонной сети. Поэтому когда говорят о том, что готовность некоторых моделей маршрутизаторов достигла рубежа 0,999 и стремиться к показателям телефонного оборудования в 0,99999, то в первую очередь это относится к маршрутизаторам операторов связи, как магистральным, так и пограничным. Корпоративные маршрутизаторы предназначены для применения в пределах корпоративной сети, поэтому требования к надежности здесь ниже, а функциональность для работы в Интернете в качестве самостоятельной автономной системы не требуется.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Конечно, характеристики маршрутизаторов операторов связи и корпоративных маршрутизаторов в значительной степени зависят от масштаба и специфики оператора связи или корпорации. Для крупного международного оператора связи сегодня требуются магистральные маршрутизаторы с интерфейсами 10 Гбит/сек, которые в недалеком будущем будут заменены маршрутизаторами с портами в 100 Гбит/сек. Пограничные маршрутизаторы такого оператора также будут относиться к лучшим маршрутизаторам этого класса по производительности, работая с портами доступа со скоростью от 622 Мбит/с до 2,5 Гбит/с.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Менее крупным операторам связи, то есть региональным и локальным, такие высокопроизводительные маршрутизаторы не требуются, так как объемы передаваемого ими трафика гораздо меньше. Поэтому магистральный маршрутизатор подобного оператора может ограничиться поддержкой интерфейсов 1 Гбит/с, а пограничный маршрутизатор должен, кроме того, обеспечивать коммутируемый доступ абонентов через телефонные сети. В небольших сетях магистральных маршрутизаторов может не быть вообще, такая сеть будет состоять из нескольких (или даже одного) пограничных маршрутизаторов. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Аналогичная картина наблюдается и в корпоративных сетях, где также применяются маршрутизаторы различной производительности и надежности. Например, крупные корпорации могут применять магистральный и пограничный маршрутизаторы, близкие по характеристикам к маршрутизаторам операторов связи категории Tiar 1. Однако более обычной является ситуация, когда в корпоративных сетях применяется оборудование с характеристиками на один уровень ниже. Это значит, что крупные многонациональные корпорации задействует оборудование, которое обычно используется региональными операторами и.т.д., по нисходящей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Помимо этого встречаются и другие типы маршрутизаторов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Маршрутизаторы региональных отделений</em> соединяют региональные отделения между собой и с магистральной сетью. Сеть регионального отделения, также как и магистральная сеть может состоять из нескольких локальных сетей. Такой маршрутизатор обычно представляет собой некоторую упрощенную версию, магистрального корпоративного маршрутизатора.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Если он выполнен на основе шасси, то количество слотов его шасси меньше (4-5). Возможен также конструктив с фиксированным количеством портов. Поддерживаемые интерфейсы локальных и глобальных сетей менее скоростные. Это наиболее обширный класс выпускаемых маршрутизаторов, характеристики которых могут приближаться к характеристикам магистральных маршрутизаторов, а могут и опускаться до характеристик маршрутизаторов удаленных офисов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Маршрутизаторы удаленных офисов соединяют, как правило, единственную локальную сеть удаленного офиса с магистральной сетью или сетью регионального отделения по глобальной связи. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Как правило, интерфейс локальной сети представляет собой Ethernet 100/1000 Мбит/сек, а интерфейс глобальной сети – выделенную линию со скоростью 2-100 Мбит/сек. Маршрутизатор удаленного офиса может поддерживать работу по коммутируемой телефонной линии в качестве резервной связи для выделенного канала. Существует очень большое количество типов маршрутизаторов удаленных офисов. Это объясняется как массовостью потенциальных потребителей, так и специализации такого типа устройств, проявляющихся в поддержке какого-либо конкретного типа глобальной связи. Например, существуют маршрутизаторы, работающие только в сетях ISDN, существуют модели только для аналоговых выделенных линий и.т.п.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Чем меньше требований предъявляются к производительности маршрутизатора, тем более вероятно, что он выполнен по классической схеме первых маршрутизаторов (и мостов локальных сетей), то есть схемы на основе единственного центрального процессора и без процессоров портов. Такая схема гораздо дешевле, но ее производительность полностью определяется производительностью процессора и не масштабируется с ростом числа портов.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Программный маршрутизатор</em>, являясь одной из популярных реализации такой схемы, представляет собой программный модуль универсальной операционной системы семейства UNIX  или Windows.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;И только появление в глобальных сетях высокоскоростных технологий, таких как ATM, Ethernet, SONET/SDH, DWDM, привело к резкому повышению требований к производительности маршрутизаторов, в результате представители наиболее совершенного класса маршрутизатора, повсеместно перешли на <em>многопроцессорные схемы с коммутирующим блоком</em>, успешно опробованные на коммутаторах локальных сетей.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>Маршрутизаторы локальных сетей</em> предназначены  для разделения крупных локальных сетей на подсети. Это особый класс маршрутизаторов, которые, как правило, не имеют интерфейсов глобальных сетей. </p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Многие маршрутизаторы этого типа ведут свое происхождение от коммутаторов локальных сетей, что и дало им второе название – коммутаторы третьего уровня. Коммутаторы третьего уровня выполняют все функции маршрутизатора, но, кроме того, могут работать как обычные коммутаторы локальных сетей, то есть коммутаторы второго уровня. Режим работы (маршрутизатор или коммутатор) зависит от конфигурационных параметров. Возможен также комбинированный режим работы, когда несколько портов коммутатора третьего уровня имеют один и тот же IP-адрес сети (рисунок 4.37). В этом случае передача пакетов между группой портов, принадлежащих одной сети, выполняется в режиме коммутации на канальном уровне, то есть на основе MAC-адресов. Если же порты принадлежат разным IP-адресам, то тогда коммутатор выполняет маршрутизацию между сетями. Выбор режима передачи пакета определяется конфигурированием  IP-адресов портов и, соответственно, компьютеров.</p>
<p align="center"><img src="img/chapter4/4.37.jpg"/></p>
<p align="center">Рисунок 4.37 - Комбинированный режим работы коммутатора третьего уровня</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Например, если два компьютера (С1 и С2 на рисунке 18.29) имеют адреса, принадлежащие одной сети, то при обмене информацией они не будут передавать пакеты маршрутизатору по умолчанию, а задействуют протокол ARP, чтобы  узнать MAC-адрес компьютера назначения. Пусть компьютеру С1 требуется передать пакет компьютеру С2. Коммутатор третьего уровня передает кадр ARP-запроса компьютера С1 с широковещательным  MAC-адресом всем портам, принадлежащим одной IP-сети, то есть портам P1, P2, P3, и P4. Компьютер С2 распознает свой IP–адрес  (194.100.15.3) в этом запросе и отвечает направленным кадром с MAC-адресом назначения компьютера С1 (MAC1), помещая в ответ собственный MAC-адрес (MAC2). После этого компьютер С1 направляет IP-пакет компьютеру С2, помещая его в кадр с адресом назначения МАС2. Коммутатор третьего уровня передает этот кадр с порта Р1 на порт Р2 в соответствии с алгоритмом моста на основе таблицы продвижения 2-го уровня. Аналогичным образом будет работать  коммутатор третьего уровня. В случае, когда компьютеры принадлежат различным IP-сетям, поведение компьютера – отправителя диктует коммутатору 3-го уровня способ продвижения пакета.  Если, например, компьютер С1 отправляет пакет компьютеру С3, находящемуся в другой сети, то он обязан передать пакет маршрутизатору по умолчанию, а не пытаться с помощью  ARP узнать МАС–адрес компьютера назначения. Поэтому компьютер С1 делает ARP запрос о МАС-адресе известного ему маршрутизатора по умолчанию, которым для него становиться порт Р1 и IP-адресом и IP–R1. После получения МАС-адреса порта Р1 (МАС – Р1) компьютер С1 посылает ему  IP-пакет для компьютера С3 (то есть по IP-адресу назначения 194. 100. 17. 11), оформив его как кадр Ethernet с адресом назначения МАС – Р1. Получив кадр с собственным МАС – адресом, коммутатор 3-го уровня обрабатывает его по схеме маршрутизации, а не коммутации.</p>
<p style="text-align:justify">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Коммутаторы третьего уровня поддерживают технику VLAN, являясь основным типом устройств для соединения отдельных виртуальных сетей в составную IP-сеть. Обычно каждой виртуальной сети присваивается номер IP-сети, так что передача внутри сетей идет на основе МАС-адресов, а между сетями – на основе IP-адресов. В представленном на рисунке 18.29 примере сети порты Р1-Р4 могут принадлежать одной виртуальной сети, а порты Р5, Р6 – другой [Олифер Принципы Технологии Протоколы].</p>
</font>
<br>
<br>
<table align="center">
	<tr>
		<td width="220" align="left"><a href="3.htm#3"><font class="norm">&lt;&lt; Предыдущая глава</font></a></td>
        <td width="220" align="right"><a href="5.htm#5"><font class="norm">Следующая глава >></font></a></td>
    </tr>
</table>
<br>
<br>

</body>
</html>
